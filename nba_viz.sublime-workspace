{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fi",
				"first_game\tstatement"
			],
			[
				"y_",
				"y_lab\tstatement"
			],
			[
				"sele",
				"select_data\tfunction"
			],
			[
				"helpe",
				"helper_funcs\tmodule"
			],
			[
				"var",
				"var_view_map\tinstance"
			],
			[
				"to",
				"teams.tolist"
			],
			[
				"dat",
				"date_range\tstatement"
			],
			[
				"Dat",
				"DateRangeSlider"
			],
			[
				"select",
				"select_movies\tfunction"
			],
			[
				"genr",
				"genre_val\tstatement"
			],
			[
				"dir",
				"dirname\tfunction"
			],
			[
				"size",
				"size_mapper\tstatement"
			],
			[
				"y",
				"y_axis_label"
			],
			[
				"plot",
				"plot_width"
			],
			[
				"call",
				"callback\tstatement"
			],
			[
				"get",
				"get_custom_hover\timport"
			],
			[
				"bo",
				"bokeh"
			],
			[
				"enc",
				"enc_y"
			],
			[
				"cross_va",
				"cross_val_score"
			],
			[
				"setu",
				"setuptools\tmodule"
			],
			[
				"ses",
				"sessionmaker"
			],
			[
				"table",
				"engine.table_names"
			],
			[
				"s",
				"suit"
			],
			[
				"suit",
				"suit_values\tstatement"
			],
			[
				"F",
				"FrenchDeck\tclass"
			],
			[
				"sum",
				"sum_counts\tstatement"
			],
			[
				"keyva",
				"keyvalue\tstatement"
			],
			[
				"keyval",
				"keyvalue_duration\tstatement"
			],
			[
				"norm",
				"normal_key_interactions"
			],
			[
				"con",
				"conf"
			],
			[
				"Spar",
				"SparkContext\timport"
			],
			[
				"confi",
				"configure_spark\tfunction"
			],
			[
				"input",
				"inputFile\tstatement"
			],
			[
				"Nu",
				"NuPICFileOutput\tclass"
			],
			[
				"nu",
				"nupic_output\tmodule"
			],
			[
				"model",
				"model_params\tparam"
			],
			[
				"mo",
				"MODEL_PARAMS\timport"
			],
			[
				"csv",
				"csvReader\tstatement"
			],
			[
				"mde",
				"modelFactory\timport"
			],
			[
				"swarm",
				"swarmWorkDir\tstatement"
			],
			[
				"sw",
				"swarmWorkDir\tstatement"
			],
			[
				"create",
				"create_worstalbums_table\tfunction"
			],
			[
				"utc",
				"utcnow\tfunction"
			],
			[
				"remove",
				"removeParenthesis\tfunction"
			],
			[
				"re",
				"removeParenthesis\tfunction"
			],
			[
				"topal",
				"topalbums\tstatement"
			],
			[
				"crea",
				"create_topalbums_table\tfunction"
			],
			[
				"cre",
				"create_deals_table\tfunction"
			],
			[
				"decla",
				"declarative_base\timport"
			],
			[
				"sql",
				"sqlalchemy"
			],
			[
				"R",
				"RYM_rating"
			],
			[
				"next",
				"next_page\tstatement"
			],
			[
				"fin",
				"find_between"
			],
			[
				"chart",
				"chart_detail_l2\tstatement"
			],
			[
				"cha",
				"chart_detail_l2\tstatement"
			],
			[
				"char",
				"chart_detail_l1\tstatement"
			],
			[
				"nex",
				"next_page\tstatement"
			],
			[
				"url",
				"urljoin"
			],
			[
				"hm",
				"humor"
			],
			[
				"extra",
				"extract_with_css\tfunction"
			],
			[
				"ex",
				"extract_first"
			],
			[
				"per",
				"elements.period"
			],
			[
				"py",
				"pyplot\tmodule"
			],
			[
				"Choice",
				"ChoiceInline"
			],
			[
				"pub",
				"pub_date"
			],
			[
				"HttpR",
				"HttpResponseRedirect"
			],
			[
				"Http",
				"HttpResponse"
			],
			[
				"selec",
				"selected_choice"
			],
			[
				"question",
				"question_id"
			]
		]
	},
	"buffers":
	[
		{
			"file": "constants.py",
			"settings":
			{
				"buffer_size": 1108,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 3631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/baasman/Documents/python-workspace/dask_practice.py",
			"settings":
			{
				"buffer_size": 307,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/baasman/Documents/python-workspace/movies/testnba.py",
			"settings":
			{
				"buffer_size": 341,
				"line_ending": "Unix"
			}
		},
		{
			"file": "helper_funcs.py",
			"settings":
			{
				"buffer_size": 197,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Jupyter Console 4.1.1\n\n\nIn [1]:     xaxis = list(range(1, end.value - begin.value))\n  File \"<string>\", line 1\n    xaxis = list(range(1, end.value - begin.value))\n    ^\nIndentationError: unexpected indent\n\n\nIn [2]: x = list(range(1, 10-8))\n\nIn [3]: x\nOut[3]: [1]\n\nIn [4]: range(1, 10-8)\nOut[4]: range(1, 2)\n\nIn [5]: list(range(10))\nOut[5]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [6]: range(1, 10-3)\nOut[6]: range(1, 7)\n\nIn [7]: list(range(1, 10-3))\nOut[7]: [1, 2, 3, 4, 5, 6]\n\nIn [8]: list(range(2, 10-2))\nOut[8]: [2, 3, 4, 5, 6, 7]\n\nIn [9]: import numpy as np\nfrom constants import teams, var_view_map\nfrom nba_py.team import TeamGameLogs\n\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import layout, widgetbox, column\nfrom bokeh.models import ColumnDataSource, HoverTool, Div\nfrom bokeh.models.widgets import Slider, Select, TextInput, DateRangeSlider, Button, MultiSelect\nfrom bokeh.io import curdoc\nfrom datetime import datetime\n\nIn [10]: \nteam_options = list(teams.keys())\n\nbegin = Slider(title=\"First game\", start=1,\n               end=82, value=82, step=1)\nend = Slider(title=\"Last game\", start=1,\n             end=82, value=82, step=1)\nteam = Select(title='Team', value='GSW', options=team_options)\n\nIn [11]: begin.value\nOut[11]: 82\n\nIn [12]: tl = TeamList().info()\nteams = tl.ABBREVIATION[:30].values\ncodes = tl.TEAM_ID[:30].values\nd = dict((key, value) for key, value in zip(teams, codes))\n\n data = TeamGameLogs(d['GSW']).info()\n  File \"<string>\", line 6\n    data = TeamGameLogs(d['GSW']).info()\n    ^\nIndentationError: unexpected indent\n\n\nIn [13]: from nba_py.player import PlayerList\nfrom nba_py.game import BoxscoreSummary\nimport nba_py\nfrom nba_py.team import _TeamDashboard, TeamGameLogs, TeamList\n\nIn [14]: tl = TeamList().info()\nteams = tl.ABBREVIATION[:30].values\ncodes = tl.TEAM_ID[:30].values\n\nIn [15]: \nIn [16]: \nIn [17]: d = dict((key, value) for key, value in zip(teams, codes))\n\n data = TeamGameLogs(d['GSW']).info()\n  File \"<string>\", line 3\n    data = TeamGameLogs(d['GSW']).info()\n    ^\nIndentationError: unexpected indent\n\n\nIn [18]: d = dict((key, value) for key, value in zip(teams, codes))\n\n data = TeamGameLogs(d['GSW']).info()\n  File \"<string>\", line 3\n    data = TeamGameLogs(d['GSW']).info()\n    ^\nIndentationError: unexpected indent\n\n\nIn [19]: d = dict((key, value) for key, value in zip(teams, codes))\n\nIn [20]: d\nOut[20]: \n{'ATL': 1610612737,\n 'BKN': 1610612751,\n 'BOS': 1610612738,\n 'CHA': 1610612766,\n 'CHI': 1610612741,\n 'CLE': 1610612739,\n 'DAL': 1610612742,\n 'DEN': 1610612743,\n 'DET': 1610612765,\n 'GSW': 1610612744,\n 'HOU': 1610612745,\n 'IND': 1610612754,\n 'LAC': 1610612746,\n 'LAL': 1610612747,\n 'MEM': 1610612763,\n 'MIA': 1610612748,\n 'MIL': 1610612749,\n 'MIN': 1610612750,\n 'NOP': 1610612740,\n 'NYK': 1610612752,\n 'OKC': 1610612760,\n 'ORL': 1610612753,\n 'PHI': 1610612755,\n 'PHX': 1610612756,\n 'POR': 1610612757,\n 'SAC': 1610612758,\n 'SAS': 1610612759,\n 'TOR': 1610612761,\n 'UTA': 1610612762,\n 'WAS': 1610612764}\n\nIn [21]: data = TeamGameLogs(d['GSW']).info()\n\nIn [22]: data.head()\nOut[22]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP    WL     W    L  W_PCT  \\\n0  1610612744  0021600566  JAN 08, 2017    GSW @ SAC  None   NaN  NaN    NaN   \n1  1610612744  0021600550  JAN 06, 2017  GSW vs. MEM     L  31.0  6.0  0.838   \n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR     W  31.0  5.0  0.861   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN     W  30.0  5.0  0.857   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL     W  29.0  5.0  0.853   \n\n   MIN  FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0  120   20 ...    0.889     4    17   21   16    3    2   10   7   51  \n1  265   41 ...    0.744     7    37   44   23    7    5   16  21  119  \n2  240   44 ...    0.828     8    31   39   31   14    9   15  20  125  \n3  240   50 ...    0.762    12    31   43   33    7    2   13  14  127  \n4  240   42 ...    0.867     4    39   43   31    5    4   13  12  108  \n\n[5 rows x 27 columns]\n\nIn [23]: data.shape\nOut[23]: (38, 27)\n\nIn [24]: var_view_map\nOut[24]: {'Assist': 'AST', 'Steals': 'STL', 'TOV': 'TOV'}\n\nIn [25]: var_view_map.keys()\nOut[25]: dict_keys(['Assist', 'Steals', 'TOV'])\n\nIn [26]: sorted(var_view_map.keys())\nOut[26]: ['Assist', 'Steals', 'TOV']\n\nIn [27]: data.MATCHUP\nOut[27]: \n0       GSW @ SAC\n1     GSW vs. MEM\n2     GSW vs. POR\n3     GSW vs. DEN\n4     GSW vs. DAL\n5     GSW vs. TOR\n6       GSW @ CLE\n7       GSW @ DET\n8       GSW @ BKN\n9     GSW vs. UTA\n10    GSW vs. POR\n11    GSW vs. NYK\n12      GSW @ NOP\n13      GSW @ MIN\n14      GSW @ MEM\n15      GSW @ UTA\n16      GSW @ LAC\n17    GSW vs. IND\n18    GSW vs. PHX\n19    GSW vs. HOU\n20    GSW vs. ATL\n21    GSW vs. MIN\n22      GSW @ LAL\n23    GSW vs. LAL\n24      GSW @ IND\n25      GSW @ MIL\n26      GSW @ BOS\n27      GSW @ TOR\n28    GSW vs. PHX\n29      GSW @ DEN\n30    GSW vs. DAL\n31    GSW vs. NOP\n32      GSW @ LAL\n33    GSW vs. OKC\n34      GSW @ POR\n35      GSW @ PHX\n36      GSW @ NOP\n37    GSW vs. SAS\nName: MATCHUP, dtype: object\n\nIn [28]: m = data.MATCHUP\n\nIn [29]: for i in m:\n   ....: \tprint i\n  File \"<ipython-input-29-770760d1cbf0>\", line 2\n    print i\n          ^\nSyntaxError: Missing parentheses in call to 'print'\n\n\nIn [30]: for i in m:\n   ....: \tprint(i)\n   ....: \n   ....: \nGSW @ SAC\nGSW vs. MEM\nGSW vs. POR\nGSW vs. DEN\nGSW vs. DAL\nGSW vs. TOR\nGSW @ CLE\nGSW @ DET\nGSW @ BKN\nGSW vs. UTA\nGSW vs. POR\nGSW vs. NYK\nGSW @ NOP\nGSW @ MIN\nGSW @ MEM\nGSW @ UTA\nGSW @ LAC\nGSW vs. IND\nGSW vs. PHX\nGSW vs. HOU\nGSW vs. ATL\nGSW vs. MIN\nGSW @ LAL\nGSW vs. LAL\nGSW @ IND\nGSW @ MIL\nGSW @ BOS\nGSW @ TOR\nGSW vs. PHX\nGSW @ DEN\nGSW vs. DAL\nGSW vs. NOP\nGSW @ LAL\nGSW vs. OKC\nGSW @ POR\nGSW @ PHX\nGSW @ NOP\nGSW vs. SAS\n\nIn [31]: for i in m:\n   ....: \tprint(type(i))\n   ....: \n   ....: \n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n<class 'str'>\n\nIn [32]: h = 'hrehfjskerf'\n\nIn [33]: h[:-3]\nOut[33]: 'hrehfjsk'\n\nIn [34]: h[:3]\nOut[34]: 'hre'\n\nIn [35]: h[3:]\nOut[35]: 'hfjskerf'\n\nIn [36]: h[-3:]\nOut[36]: 'erf'\n\nIn [37]: data.head()\nOut[37]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP    WL     W    L  W_PCT  \\\n0  1610612744  0021600566  JAN 08, 2017    GSW @ SAC  None   NaN  NaN    NaN   \n1  1610612744  0021600550  JAN 06, 2017  GSW vs. MEM     L  31.0  6.0  0.838   \n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR     W  31.0  5.0  0.861   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN     W  30.0  5.0  0.857   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL     W  29.0  5.0  0.853   \n\n   MIN  FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0  120   20 ...    0.889     4    17   21   16    3    2   10   7   51  \n1  265   41 ...    0.744     7    37   44   23    7    5   16  21  119  \n2  240   44 ...    0.828     8    31   39   31   14    9   15  20  125  \n3  240   50 ...    0.762    12    31   43   33    7    2   13  14  127  \n4  240   42 ...    0.867     4    39   43   31    5    4   13  12  108  \n\n[5 rows x 27 columns]\n\nIn [38]: data.apply(lambda x: x['OREB'] > 4)\n\nTypeErrorTraceback (most recent call last)\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.Int64HashTable.get_item (pandas/hashtable.c:6589)()\n\nTypeError: an integer is required\n\nDuring handling of the above exception, another exception occurred:\n\nKeyErrorTraceback (most recent call last)\n<ipython-input-38-baf83cf70afb> in <module>()\n----> 1 data.apply(lambda x: x['OREB'] > 4)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in apply(self, func, axis, broadcast, raw, reduce, args, **kwds)\n   4059                     if reduce is None:\n   4060                         reduce = True\n-> 4061                     return self._apply_standard(f, axis, reduce=reduce)\n   4062             else:\n   4063                 return self._apply_broadcast(f, axis)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _apply_standard(self, func, axis, ignore_failures, reduce)\n   4155             try:\n   4156                 for i, v in enumerate(series_gen):\n-> 4157                     results[i] = func(v)\n   4158                     keys.append(v.name)\n   4159             except Exception as e:\n\n<ipython-input-38-baf83cf70afb> in <lambda>(x)\n----> 1 data.apply(lambda x: x['OREB'] > 4)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/series.py in __getitem__(self, key)\n    581         key = com._apply_if_callable(key, self)\n    582         try:\n--> 583             result = self.index.get_value(self, key)\n    584 \n    585             if not lib.isscalar(result):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_value(self, series, key)\n   1978         try:\n   1979             return self._engine.get_value(s, k,\n-> 1980                                           tz=getattr(series.dtype, 'tz', None))\n   1981         except KeyError as e1:\n   1982             if len(self) > 0 and self.inferred_type in ['integer', 'boolean']:\n\npandas/index.pyx in pandas.index.IndexEngine.get_value (pandas/index.c:3332)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_value (pandas/index.c:3035)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4084)()\n\nKeyError: ('OREB', 'occurred at index Team_ID')\n\nIn [39]: data.apply(lambda x: x['OREB'] > 4, axis=1)\nOut[39]: \n0     False\n1      True\n2      True\n3      True\n4     False\n5      True\n6      True\n7     False\n8      True\n9      True\n10     True\n11     True\n12     True\n13     True\n14     True\n15     True\n16     True\n17     True\n18     True\n19     True\n20     True\n21     True\n22    False\n23     True\n24     True\n25     True\n26     True\n27     True\n28     True\n29     True\n30     True\n31     True\n32     True\n33     True\n34     True\n35     True\n36     True\n37     True\ndtype: bool\n\nIn [40]:     data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n  File \"<string>\", line 1\n    data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n    ^\nIndentationError: unexpected indent\n\n\nIn [41]: data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n\nIn [42]: data.head()\nOut[42]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP    WL     W    L  W_PCT  \\\n0  1610612744  0021600566  JAN 08, 2017    GSW @ SAC  None   NaN  NaN    NaN   \n1  1610612744  0021600550  JAN 06, 2017  GSW vs. MEM     L  31.0  6.0  0.838   \n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR     W  31.0  5.0  0.861   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN     W  30.0  5.0  0.857   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL     W  29.0  5.0  0.853   \n\n   MIN  FGM  ...    OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS   Away  \n0  120   20  ...       4    17   21   16    3    2   10   7   51   True  \n1  265   41  ...       7    37   44   23    7    5   16  21  119  False  \n2  240   44  ...       8    31   39   31   14    9   15  20  125  False  \n3  240   50  ...      12    31   43   33    7    2   13  14  127  False  \n4  240   42  ...       4    39   43   31    5    4   13  12  108  False  \n\n[5 rows x 28 columns]\n\nIn [43]:     data = data[isinstance(data['WL'])]\n  File \"<string>\", line 1\n    data = data[isinstance(data['WL'])]\n    ^\nIndentationError: unexpected indent\n\n\nIn [44]: data = data[isinstance(data['WL'])]\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-44-83e68038fc46> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64617461203d20646174615b6973696e7374616e636528646174615b27574c275d295d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: isinstance expected 2 arguments, got 1\n\nIn [45]: data = data[isinstance(data['WL'], str)]\n\nKeyErrorTraceback (most recent call last)\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1944             try:\n-> 1945                 return self._engine.get_loc(key)\n   1946             except KeyError:\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: False\n\nDuring handling of the above exception, another exception occurred:\n\nKeyErrorTraceback (most recent call last)\n<ipython-input-45-57af28f8a3f6> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64617461203d20646174615b6973696e7374616e636528646174615b27574c275d2c20737472295d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   1995             return self._getitem_multilevel(key)\n   1996         else:\n-> 1997             return self._getitem_column(key)\n   1998 \n   1999     def _getitem_column(self, key):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _getitem_column(self, key)\n   2002         # get column\n   2003         if self.columns.is_unique:\n-> 2004             return self._get_item_cache(key)\n   2005 \n   2006         # duplicate columns & possible reduce dimensionality\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in _get_item_cache(self, item)\n   1348         res = cache.get(item)\n   1349         if res is None:\n-> 1350             values = self._data.get(item)\n   1351             res = self._box_item_values(item, values)\n   1352             cache[item] = res\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in get(self, item, fastpath)\n   3288 \n   3289             if not isnull(item):\n-> 3290                 loc = self.items.get_loc(item)\n   3291             else:\n   3292                 indexer = np.arange(len(self.items))[isnull(self.items)]\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1945                 return self._engine.get_loc(key)\n   1946             except KeyError:\n-> 1947                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   1948 \n   1949         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: False\n\nIn [46]: data['WL']\nOut[46]: \n0     None\n1        L\n2        W\n3        W\n4        W\n5        W\n6        L\n7        W\n8        W\n9        W\n10       W\n11       W\n12       W\n13       W\n14       L\n15       W\n16       W\n17       W\n18       W\n19       L\n20       W\n21       W\n22       W\n23       W\n24       W\n25       W\n26       W\n27       W\n28       W\n29       W\n30       W\n31       W\n32       L\n33       W\n34       W\n35       W\n36       W\n37       L\nName: WL, dtype: object\n\nIn [47]: data['WL'] is not None\nOut[47]: True\n\nIn [48]: data['WL'] in ['L', 'W']\n\nValueErrorTraceback (most recent call last)\n<ipython-input-48-0a465c4c38f1> in <module>()\n----> 1 data['WL'] in ['L', 'W']\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in __nonzero__(self)\n    890         raise ValueError(\"The truth value of a {0} is ambiguous. \"\n    891                          \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n--> 892                          .format(self.__class__.__name__))\n    893 \n    894     __bool__ = __nonzero__\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [49]: data['WL'].bool()\n\nValueErrorTraceback (most recent call last)\n<ipython-input-49-be0c4d862ae3> in <module>()\n----> 1 data['WL'].bool()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in bool(self)\n    908                              \"{0}\".format(self.__class__.__name__))\n    909 \n--> 910         self.__nonzero__()\n    911 \n    912     def __abs__(self):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in __nonzero__(self)\n    890         raise ValueError(\"The truth value of a {0} is ambiguous. \"\n    891                          \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n--> 892                          .format(self.__class__.__name__))\n    893 \n    894     __bool__ = __nonzero__\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [50]: data['WL'] == 'W'\nOut[50]: \n0     False\n1     False\n2      True\n3      True\n4      True\n5      True\n6     False\n7      True\n8      True\n9      True\n10     True\n11     True\n12     True\n13     True\n14    False\n15     True\n16     True\n17     True\n18     True\n19    False\n20     True\n21     True\n22     True\n23     True\n24     True\n25     True\n26     True\n27     True\n28     True\n29     True\n30     True\n31     True\n32    False\n33     True\n34     True\n35     True\n36     True\n37    False\nName: WL, dtype: bool\n\nIn [51]: data['WL'] == 'W' or data['WL'] == 'L'\n\nValueErrorTraceback (most recent call last)\n<ipython-input-51-684db5074cc3> in <module>()\n----> 1 data['WL'] == 'W' or data['WL'] == 'L'\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in __nonzero__(self)\n    890         raise ValueError(\"The truth value of a {0} is ambiguous. \"\n    891                          \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n--> 892                          .format(self.__class__.__name__))\n    893 \n    894     __bool__ = __nonzero__\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [52]: data['WL'][0] \n\nIn [53]: df.WL.notnull()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-53-4b174345a7dd> in <module>()\n----> 1 df.WL.notnull()\n\nNameError: name 'df' is not defined\n\nIn [54]: data.WL.notnull()\nOut[54]: \n0     False\n1      True\n2      True\n3      True\n4      True\n5      True\n6      True\n7      True\n8      True\n9      True\n10     True\n11     True\n12     True\n13     True\n14     True\n15     True\n16     True\n17     True\n18     True\n19     True\n20     True\n21     True\n22     True\n23     True\n24     True\n25     True\n26     True\n27     True\n28     True\n29     True\n30     True\n31     True\n32     True\n33     True\n34     True\n35     True\n36     True\n37     True\nName: WL, dtype: bool\n\nIn [55]: first_game = 1\n\nIn [56]: last_game = 10\n\nIn [57]: data = data.iloc[first_game:last_game]\n\nIn [58]: data = data[data.WL.notnull()]\n\nIn [59]: data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n\nIn [60]: data.head()\nOut[60]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP WL     W    L  W_PCT  \\\n1  1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31.0  6.0  0.838   \n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31.0  5.0  0.861   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30.0  5.0  0.857   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29.0  5.0  0.853   \n5  1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28.0  5.0  0.848   \n\n   MIN  FGM  ...    OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS   Away  \n1  265   41  ...       7    37   44   23    7    5   16  21  119  False  \n2  240   44  ...       8    31   39   31   14    9   15  20  125  False  \n3  240   50  ...      12    31   43   33    7    2   13  14  127  False  \n4  240   42  ...       4    39   43   31    5    4   13  12  108  False  \n5  240   46  ...       9    42   51   33    4    9   20  16  121  False  \n\n[5 rows x 28 columns]\n\nIn [61]: var_view_map\nOut[61]: {'Assist': 'AST', 'Steals': 'STL', 'TOV': 'TOV'}\n\nIn [62]:     x_axis = list(range(begin.value, end.value - begin.value + 1))\n  File \"<string>\", line 1\n    x_axis = list(range(begin.value, end.value - begin.value + 1))\n    ^\nIndentationError: unexpected indent\n\n\nIn [63]: x_axis = list(range(begin.value, end.value - begin.value + 1))\n\nIn [64]: x_axis\nOut[64]: []\n\nIn [65]: data.head()\nOut[65]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP WL     W    L  W_PCT  \\\n1  1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31.0  6.0  0.838   \n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31.0  5.0  0.861   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30.0  5.0  0.857   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29.0  5.0  0.853   \n5  1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28.0  5.0  0.848   \n\n   MIN  FGM  ...    OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS   Away  \n1  265   41  ...       7    37   44   23    7    5   16  21  119  False  \n2  240   44  ...       8    31   39   31   14    9   15  20  125  False  \n3  240   50  ...      12    31   43   33    7    2   13  14  127  False  \n4  240   42  ...       4    39   43   31    5    4   13  12  108  False  \n5  240   46  ...       9    42   51   33    4    9   20  16  121  False  \n\n[5 rows x 28 columns]\n\nIn [66]: x = 'fdsffsdffx'\n\nIn [67]: x[:-2]\nOut[67]: 'fdsffsdf'\n\nIn [68]: x[-2:]\nOut[68]: 'fx'\n\nIn [69]: stat = 'AST'\n\nIn [70]:     selection = data[['Opp', 'GAME_DATE', 'WL', 'AWAY', stat]]\n  File \"<string>\", line 1\n    selection = data[['Opp', 'GAME_DATE', 'WL', 'AWAY', stat]]\n    ^\nIndentationError: unexpected indent\n\n\nIn [71]: selection = data[['Opp', 'GAME_DATE', 'WL', 'AWAY', stat]]\n\nKeyErrorTraceback (most recent call last)\n<ipython-input-71-9aee1d049476> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e203d20646174615b5b274f7070272c202747414d455f44415445272c2027574c272c202741574159272c20737461745d5d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   1989         if isinstance(key, (Series, np.ndarray, Index, list)):\n   1990             # either boolean or fancy integer index\n-> 1991             return self._getitem_array(key)\n   1992         elif isinstance(key, DataFrame):\n   1993             return self._getitem_frame(key)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _getitem_array(self, key)\n   2033             return self.take(indexer, axis=0, convert=False)\n   2034         else:\n-> 2035             indexer = self.ix._convert_to_indexer(key, axis=1)\n   2036             return self.take(indexer, axis=1, convert=True)\n   2037 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/indexing.py in _convert_to_indexer(self, obj, axis, is_setter)\n   1212                 mask = check == -1\n   1213                 if mask.any():\n-> 1214                     raise KeyError('%s not in index' % objarr[mask])\n   1215 \n   1216                 return _values_from_object(indexer)\n\nKeyError: \"['Opp' 'AWAY'] not in index\"\n\nIn [72]: team = team_selection.value\n    data = TeamGameLogs(teams[team]).info()\n\n    first_game = begin.value\n    last_game = min(end.value, data.shape[0])\n    data = data.iloc[first_game:last_game]\n    data = data[data.WL.notnull()]\n    data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n    data['Opp'] = data.apply(lambda x: x[-3:], axis=1)\n  File \"<string>\", line 2\n    data = TeamGameLogs(teams[team]).info()\n    ^\nIndentationError: unexpected indent\n\n\nIn [73]: team = team_selection.value\n\nNameErrorTraceback (most recent call last)\n<ipython-input-73-fd2b54043e77> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"7465616d203d207465616d5f73656c656374696f6e2e76616c75650a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'team_selection' is not defined\n\nIn [74]: team ='GSW'\n\nIn [75]: data = TeamGameLogs(teams[team]).info()\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future\n  if __name__ == '__main__':\n\nIndexErrorTraceback (most recent call last)\n<ipython-input-75-eb138398fcda> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64617461203d205465616d47616d654c6f6773287465616d735b7465616d5d292e696e666f28290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\n\nIn [76]: teams\nOut[76]: \narray(['ATL', 'BOS', 'CLE', 'NOP', 'CHI', 'DAL', 'DEN', 'GSW', 'HOU',\n       'LAL', 'MIA', 'MIL', 'MIN', 'BKN', 'NYK', 'ORL', 'IND', 'PHI',\n       'PHX', 'POR', 'SAS', 'OKC', 'TOR', 'UTA', 'MEM', 'WAS', 'DET',\n       'CHA', 'LAC', 'SAC'], dtype=object)\n\nIn [77]: from constants import teams, var_view_map\n\nIn [78]: teams\nOut[78]: \n{'ATL': 1610612737,\n 'BKN': 1610612751,\n 'BOS': 1610612738,\n 'CHA': 1610612766,\n 'CHI': 1610612741,\n 'CLE': 1610612739,\n 'DAL': 1610612742,\n 'DEN': 1610612743,\n 'DET': 1610612765,\n 'GSW': 1610612744,\n 'HOU': 1610612745,\n 'IND': 1610612754,\n 'LAC': 1610612746,\n 'LAL': 1610612747,\n 'MEM': 1610612763,\n 'MIA': 1610612748,\n 'MIL': 1610612749,\n 'MIN': 1610612750,\n 'NOP': 1610612740,\n 'NYK': 1610612752,\n 'OKC': 1610612760,\n 'ORL': 1610612753,\n 'PHI': 1610612755,\n 'PHX': 1610612756,\n 'POR': 1610612757,\n 'SAC': 1610612758,\n 'SAS': 1610612759,\n 'TOR': 1610612761,\n 'UTA': 1610612762,\n 'WAS': 1610612764}\n\nIn [79]: data = TeamGameLogs(teams[team]).info()\n\nIn [80]: first_game=1\n\nIn [81]: last_game=10\n\nIn [82]: last_game=10    data = data.iloc[first_game:last_game]\n  File \"<string>\", line 1\n    data = data.iloc[first_game:last_game]\n    ^\nIndentationError: unexpected indent\n\n\nIn [83]: data = data.iloc[first_game:last_game]\n\nIn [84]: data = data[data.WL.notnull()]\n\nIn [85]: data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n\nIn [86]: data['Opp'] = data.apply(lambda x: x[-3:], axis=1)\n\nKeyErrorTraceback (most recent call last)\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1944             try:\n-> 1945                 return self._engine.get_loc(key)\n   1946             except KeyError:\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: 'Opp'\n\nDuring handling of the above exception, another exception occurred:\n\nKeyErrorTraceback (most recent call last)\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in set(self, item, value, check)\n   3414         try:\n-> 3415             loc = self.items.get_loc(item)\n   3416         except KeyError:\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1946             except KeyError:\n-> 1947                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   1948 \n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: 'Opp'\n\nDuring handling of the above exception, another exception occurred:\n\nValueErrorTraceback (most recent call last)\n<ipython-input-86-8c531392c446> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"646174615b274f7070275d203d20646174612e6170706c79286c616d62646120783a20785b2d333a5d2c20617869733d31290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __setitem__(self, key, value)\n   2355         else:\n   2356             # set column\n-> 2357             self._set_item(key, value)\n   2358 \n   2359     def _setitem_slice(self, key, value):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _set_item(self, key, value)\n   2422         self._ensure_valid_index(value)\n   2423         value = self._sanitize_column(key, value)\n-> 2424         NDFrame._set_item(self, key, value)\n   2425 \n   2426         # check if we are modifying a copy\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in _set_item(self, key, value)\n   1462 \n   1463     def _set_item(self, key, value):\n-> 1464         self._data.set(key, value)\n   1465         self._clear_item_cache()\n   1466 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in set(self, item, value, check)\n   3416         except KeyError:\n   3417             # This item wasn't present, just insert at end\n-> 3418             self.insert(len(self.items), item, value)\n   3419             return\n   3420 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py\u001b[0m in insert(self, loc, item, value, allow_duplicates)\n   3517 \n   3518         block = make_block(values=value, ndim=self.ndim,\n-> 3519                            placement=slice(loc, loc + 1))\n   3520 \n   3521         for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in make_block(values, placement, klass, ndim, dtype, fastpath)\n   2516                      placement=placement, dtype=dtype)\n   2517 \n-> 2518     return klass(values, ndim=ndim, fastpath=fastpath, placement=placement)\n   2519 \n   2520 # TODO: flexible with index=None and/or items=None\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in __init__(self, values, ndim, fastpath, placement, **kwargs)\n   1661 \n   1662         super(ObjectBlock, self).__init__(values, ndim=ndim, fastpath=fastpath,\n-> 1663                                           placement=placement, **kwargs)\n   1664 \n   1665     @property\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in __init__(self, values, placement, ndim, fastpath)\n     88             raise ValueError('Wrong number of items passed %d, placement '\n     89                              'implies %d' % (len(self.values),\n---> 90                                              len(self.mgr_locs)))\n     91 \n     92     @property\n\nValueError: Wrong number of items passed 3, placement implies 1\n\nIn [87]: select['color'] = selection['WL'] == 'WL'\n\nNameErrorTraceback (most recent call last)\n<ipython-input-87-8df954a6d940> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c6563745b27636f6c6f72275d203d2073656c656374696f6e5b27574c275d203d3d2027574c270a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'selection' is not defined\n\nIn [88]: selection = data[['Opp', 'GAME_DATE', 'WL', 'AWAY', stat]]\n\nKeyErrorTraceback (most recent call last)\n<ipython-input-88-9aee1d049476> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e203d20646174615b5b274f7070272c202747414d455f44415445272c2027574c272c202741574159272c20737461745d5d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   1989         if isinstance(key, (Series, np.ndarray, Index, list)):\n   1990             # either boolean or fancy integer index\n-> 1991             return self._getitem_array(key)\n   1992         elif isinstance(key, DataFrame):\n   1993             return self._getitem_frame(key)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _getitem_array(self, key)\n   2033             return self.take(indexer, axis=0, convert=False)\n   2034         else:\n-> 2035             indexer = self.ix._convert_to_indexer(key, axis=1)\n   2036             return self.take(indexer, axis=1, convert=True)\n   2037 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/indexing.py in _convert_to_indexer(self, obj, axis, is_setter)\n   1212                 mask = check == -1\n   1213                 if mask.any():\n-> 1214                     raise KeyError('%s not in index' % objarr[mask])\n   1215 \n   1216                 return _values_from_object(indexer)\n\nKeyError: \"['Opp' 'AWAY'] not in index\"\n\nIn [89]:     data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n  File \"<string>\", line 1\n    data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n    ^\nIndentationError: unexpected indent\n\n\nIn [90]: data['Opp'] = data.apply(lambda x: x[-3:], axis=1)\n\nKeyErrorTraceback (most recent call last)\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1944             try:\n-> 1945                 return self._engine.get_loc(key)\n   1946             except KeyError:\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: 'Opp'\n\nDuring handling of the above exception, another exception occurred:\n\nKeyErrorTraceback (most recent call last)\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in set(self, item, value, check)\n   3414         try:\n-> 3415             loc = self.items.get_loc(item)\n   3416         except KeyError:\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py in get_loc(self, key, method, tolerance)\n   1946             except KeyError:\n-> 1947                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   1948 \n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4154)()\n\npandas/index.pyx in pandas.index.IndexEngine.get_loc (pandas/index.c:4018)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12368)()\n\npandas/hashtable.pyx in pandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:12322)()\n\nKeyError: 'Opp'\n\nDuring handling of the above exception, another exception occurred:\n\nValueErrorTraceback (most recent call last)\n<ipython-input-90-8c531392c446> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"646174615b274f7070275d203d20646174612e6170706c79286c616d62646120783a20785b2d333a5d2c20617869733d31290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __setitem__(self, key, value)\n   2355         else:\n   2356             # set column\n-> 2357             self._set_item(key, value)\n   2358 \n   2359     def _setitem_slice(self, key, value):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _set_item(self, key, value)\n   2422         self._ensure_valid_index(value)\n   2423         value = self._sanitize_column(key, value)\n-> 2424         NDFrame._set_item(self, key, value)\n   2425 \n   2426         # check if we are modifying a copy\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in _set_item(self, key, value)\n   1462 \n   1463     def _set_item(self, key, value):\n-> 1464         self._data.set(key, value)\n   1465         self._clear_item_cache()\n   1466 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in set(self, item, value, check)\n   3416         except KeyError:\n   3417             # This item wasn't present, just insert at end\n-> 3418             self.insert(len(self.items), item, value)\n   3419             return\n   3420 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in insert(self, loc, item, value, allow_duplicates)\n   3517 \n   3518         block = make_block(values=value, ndim=self.ndim,\n-> 3519                            placement=slice(loc, loc + 1))\n   3520 \n   3521         for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in make_block(values, placement, klass, ndim, dtype, fastpath)\n   2516                      placement=placement, dtype=dtype)\n   2517 \n-> 2518     return klass(values, ndim=ndim, fastpath=fastpath, placement=placement)\n   2519 \n   2520 # TODO: flexible with index=None and/or items=None\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in __init__(self, values, ndim, fastpath, placement, **kwargs)\n   1661 \n   1662         super(ObjectBlock, self).__init__(values, ndim=ndim, fastpath=fastpath,\n-> 1663                                           placement=placement, **kwargs)\n   1664 \n   1665     @property\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/internals.py in __init__(self, values, placement, ndim, fastpath)\n     88             raise ValueError('Wrong number of items passed %d, placement '\n     89                              'implies %d' % (len(self.values),\n---> 90                                              len(self.mgr_locs)))\n     91 \n     92     @property\n\nValueError: Wrong number of items passed 3, placement implies 1\n\nIn [91]: data['Opp'] = data.apply(lambda x: x['MATCHUP'][-3:], axis=1)\n\nIn [92]: stat\nOut[92]: 'AST'\n\nIn [93]: selection = data[['Opp', 'GAME_DATE', 'WL', 'AWAY', stat]]\n\nKeyErrorTraceback (most recent call last)\n<ipython-input-93-9aee1d049476> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e203d20646174615b5b274f7070272c202747414d455f44415445272c2027574c272c202741574159272c20737461745d5d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   1989         if isinstance(key, (Series, np.ndarray, Index, list)):\n   1990             # either boolean or fancy integer index\n-> 1991             return self._getitem_array(key)\n   1992         elif isinstance(key, DataFrame):\n   1993             return self._getitem_frame(key)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _getitem_array(self, key)\n   2033             return self.take(indexer, axis=0, convert=False)\n   2034         else:\n-> 2035             indexer = self.ix._convert_to_indexer(key, axis=1)\n   2036             return self.take(indexer, axis=1, convert=True)\n   2037 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/indexing.py in _convert_to_indexer(self, obj, axis, is_setter)\n   1212                 mask = check == -1\n   1213                 if mask.any():\n-> 1214                     raise KeyError('%s not in index' % objarr[mask])\n   1215 \n   1216                 return _values_from_object(indexer)\n\nKeyError: \"['AWAY'] not in index\"\n\nIn [94]: selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n\nIn [95]: select['color'] = selection['WL'] == 'WL'\n\nNameErrorTraceback (most recent call last)\n<ipython-input-95-8df954a6d940> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c6563745b27636f6c6f72275d203d2073656c656374696f6e5b27574c275d203d3d2027574c270a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'select' is not defined\n\nIn [96]: selection['color'] = selection['WL'] == 'WL'\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [97]: selection['color'] = selection['WL'] == 'WL'\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [98]:     selection['color'] = np.where(selection['WL'] == 'W', 1, 0)\n  File \"<string>\", line 1\n    selection['color'] = np.where(selection['WL'] == 'W', 1, 0)\n    ^\nIndentationError: unexpected indent\n\n\nIn [99]: selection['color'] = np.where(selection['WL'] == 'W', 1, 0)\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [100]: selection['color'] = np.where(selection['WL'] = 'W', 'orange', 'grey')\n  File \"<string>\", line 1\nSyntaxError: keyword can't be an expression\n\n\nIn [101]: selection['color'] = np.where(selection['WL'] is 'W', 'orange', 'grey')\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [102]: selection.WL == 'W'\nOut[102]: \n1    False\n2     True\n3     True\n4     True\n5     True\n6    False\n7     True\n8     True\n9     True\nName: WL, dtype: bool\n\nIn [103]:     selection['color'] = np.where(selection.WL == 'W', 'orange', 'grey')\n  File \"<string>\", line 1\n    selection['color'] = np.where(selection.WL == 'W', 'orange', 'grey')\n    ^\nIndentationError: unexpected indent\n\n\nIn [104]: selection['color'] = np.where(selection.WL == 'W', 'orange', 'grey')\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [105]: np.where(selection.WL == 'W', 'orange', 'grey')\n\nIn [106]: x = np.where(selection.WL == 'W', 'orange', 'grey')\n\nIn [107]: x\nOut[107]: \narray(['grey', 'orange', 'orange', 'orange', 'orange', 'grey', 'orange',\n       'orange', 'orange'], \n      dtype='<U6')\n\nIn [108]: selection['color'] = np.where(selection.WL == 'W', 'orange', 'grey')\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [109]: selection.WL == 'W'\nOut[109]: \n1    False\n2     True\n3     True\n4     True\n5     True\n6    False\n7     True\n8     True\n9     True\nName: WL, dtype: bool\n\nIn [110]:     selection['color'] = selection.WL == 'W'\n  File \"<string>\", line 1\n    selection['color'] = selection.WL == 'W'\n    ^\nIndentationError: unexpected indent\n\n\nIn [111]: selection['color'] = selection.WL == 'W'\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [112]:     selection['color'] = 'orange' if selection.WL == 'W' else 'gray'\n  File \"<string>\", line 1\n    selection['color'] = 'orange' if selection.WL == 'W' else 'gray'\n    ^\nIndentationError: unexpected indent\n\n\nIn [113]: selection['color'] = 'orange' if selection.WL == 'W' else 'gray'\n\nValueErrorTraceback (most recent call last)\n<ipython-input-113-53bbbb3d2294> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e5b27636f6c6f72275d203d20276f72616e6765272069662073656c656374696f6e2e574c203d3d2027572720656c7365202767726179270a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in __nonzero__(self)\n    890         raise ValueError(\"The truth value of a {0} is ambiguous. \"\n    891                          \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n--> 892                          .format(self.__class__.__name__))\n    893 \n    894     __bool__ = __nonzero__\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [114]: selection['color'] = selection.apply(lambda x: 'orange' if x['WL'] == 'W' else 'gray', axis=1)\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [115]:     mask = selection['WL'] == 'W'\n  File \"<string>\", line 1\n    mask = selection['WL'] == 'W'\n    ^\nIndentationError: unexpected indent\n\n\nIn [116]: mask = selection['WL'] == 'W'\n\nIn [117]: mask\nOut[117]: \n1    False\n2     True\n3     True\n4     True\n5     True\n6    False\n7     True\n8     True\n9     True\nName: WL, dtype: bool\n\nIn [118]: x = selection[selection['WL'] == 'W']\n\nIn [119]: x\nOut[119]: \n   Opp     GAME_DATE WL   Away  AST   color\n2  POR  JAN 04, 2017  W  False   31  orange\n3  DEN  JAN 02, 2017  W  False   33  orange\n4  DAL  DEC 30, 2016  W  False   31  orange\n5  TOR  DEC 28, 2016  W  False   33  orange\n7  DET  DEC 23, 2016  W   True   35  orange\n8  BKN  DEC 22, 2016  W   True   29  orange\n9  UTA  DEC 20, 2016  W  False   24  orange\n\nIn [120]: def color(value):\n    if value == 'W':\n        return 'orange'\n    else:\n        return 'grey'\n\nIn [121]: from helper_funcs import color\n\nIn [122]:     selection['color'] = selection.apply(color, axis=1)\n  File \"<string>\", line 1\n    selection['color'] = selection.apply(color, axis=1)\n    ^\nIndentationError: unexpected indent\n\n\nIn [123]: selection['color'] = selection.apply(color, axis=1)\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [124]: selection\nOut[124]: \n   Opp     GAME_DATE WL   Away  AST   color\n1  MEM  JAN 06, 2017  L  False   23    grey\n2  POR  JAN 04, 2017  W  False   31  orange\n3  DEN  JAN 02, 2017  W  False   33  orange\n4  DAL  DEC 30, 2016  W  False   31  orange\n5  TOR  DEC 28, 2016  W  False   33  orange\n6  CLE  DEC 25, 2016  L   True   25    grey\n7  DET  DEC 23, 2016  W   True   35  orange\n8  BKN  DEC 22, 2016  W   True   29  orange\n9  UTA  DEC 20, 2016  W  False   24  orange\n\nIn [125]:     selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n  File \"<string>\", line 1\n    selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n    ^\nIndentationError: unexpected indent\n\n\nIn [126]: selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n\nIn [127]: selection['color'] = selection.apply(color, axis=1)\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [128]: selection\nOut[128]: \n   Opp     GAME_DATE WL   Away  AST   color\n1  MEM  JAN 06, 2017  L  False   23    grey\n2  POR  JAN 04, 2017  W  False   31  orange\n3  DEN  JAN 02, 2017  W  False   33  orange\n4  DAL  DEC 30, 2016  W  False   31  orange\n5  TOR  DEC 28, 2016  W  False   33  orange\n6  CLE  DEC 25, 2016  L   True   25    grey\n7  DET  DEC 23, 2016  W   True   35  orange\n8  BKN  DEC 22, 2016  W   True   29  orange\n9  UTA  DEC 20, 2016  W  False   24  orange\n\nIn [129]: selection.index\nOut[129]: Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype='int64')\n\nIn [130]:     selection['x'] = list(range(first_game, last_game + 1))\n  File \"<string>\", line 1\n    selection['x'] = list(range(first_game, last_game + 1))\n    ^\nIndentationError: unexpected indent\n\n\nIn [131]: selection['x'] = list(range(first_game, last_game + 1))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-131-b4a4dc8ebe92> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e5b2778275d203d206c6973742872616e67652866697273745f67616d652c206c6173745f67616d65202b203129290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __setitem__(self, key, value)\n   2355         else:\n   2356             # set column\n-> 2357             self._set_item(key, value)\n   2358 \n   2359     def _setitem_slice(self, key, value):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _set_item(self, key, value)\n   2421 \n   2422         self._ensure_valid_index(value)\n-> 2423         value = self._sanitize_column(key, value)\n   2424         NDFrame._set_item(self, key, value)\n   2425 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _sanitize_column(self, key, value)\n   2576 \n   2577             # turn me into an ndarray\n-> 2578             value = _sanitize_index(value, self.index, copy=False)\n   2579             if not isinstance(value, (np.ndarray, Index)):\n   2580                 if isinstance(value, list) and len(value) > 0:\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/series.py in _sanitize_index(data, index, copy)\n   2768 \n   2769     if len(data) != len(index):\n-> 2770         raise ValueError('Length of values does not match length of ' 'index')\n   2771 \n   2772     if isinstance(data, PeriodIndex):\n\nValueError: Length of values does not match length of index\n\nIn [132]: list(range(first_game, last_game + 1))\nOut[132]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nIn [133]: selection\nOut[133]: \n   Opp     GAME_DATE WL   Away  AST   color\n1  MEM  JAN 06, 2017  L  False   23    grey\n2  POR  JAN 04, 2017  W  False   31  orange\n3  DEN  JAN 02, 2017  W  False   33  orange\n4  DAL  DEC 30, 2016  W  False   31  orange\n5  TOR  DEC 28, 2016  W  False   33  orange\n6  CLE  DEC 25, 2016  L   True   25    grey\n7  DET  DEC 23, 2016  W   True   35  orange\n8  BKN  DEC 22, 2016  W   True   29  orange\n9  UTA  DEC 20, 2016  W  False   24  orange\n\nIn [134]: data.shape[0]\nOut[134]: 9\n\nIn [135]: data = TeamGameLogs(teams[team]).info()\n\nIn [136]: first_game\nOut[136]: 1\n\nIn [137]: last_game\nOut[137]: 10\n\nIn [138]: min(10, data.shape[0])\nOut[138]: 10\n\nIn [139]: data = data.iloc[first_game:last_game]\n\nIn [140]: data.shape\nOut[140]: (9, 27)\n\nIn [141]: list(range(first_game, last_game + 1))\n\nIn [142]: x = list(range(first_game, last_game + 1))\n\nIn [143]: x\nOut[143]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nIn [144]: data = data.iloc[first_game:last_game + 1]\n\nIn [145]: data\nOut[145]: \n      Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n2  1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n3  1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n4  1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n5  1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n6  1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n7  1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n8  1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n9  1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n\n   FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n2   44 ...    0.828     8    31   39   31   14    9   15  20  125  \n3   50 ...    0.762    12    31   43   33    7    2   13  14  127  \n4   42 ...    0.867     4    39   43   31    5    4   13  12  108  \n5   46 ...    0.833     9    42   51   33    4    9   20  16  121  \n6   37 ...    0.862     5    37   42   25    8    4   19  24  108  \n7   43 ...    0.917     4    37   41   35    9    2   22  21  119  \n8   47 ...    0.786    11    40   51   29   19    7   12  19  117  \n9   40 ...    0.882     9    41   50   24   13    3   10  18  104  \n\n[8 rows x 27 columns]\n\nIn [146]: data = TeamGameLogs(teams[team]).info()\n\nIn [147]: data = data.iloc[first_game:last_game + 1]\n\nIn [148]: data\nOut[148]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n1   1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31  6  0.838  265   \n2   1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n3   1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n4   1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n5   1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n6   1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n7   1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n8   1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n9   1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n10  1610612744  0021600405  DEC 17, 2016  GSW vs. POR  W  24  4  0.857  240   \n\n    FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n1    41 ...    0.744     7    37   44   23    7    5   16  21  119  \n2    44 ...    0.828     8    31   39   31   14    9   15  20  125  \n3    50 ...    0.762    12    31   43   33    7    2   13  14  127  \n4    42 ...    0.867     4    39   43   31    5    4   13  12  108  \n5    46 ...    0.833     9    42   51   33    4    9   20  16  121  \n6    37 ...    0.862     5    37   42   25    8    4   19  24  108  \n7    43 ...    0.917     4    37   41   35    9    2   22  21  119  \n8    47 ...    0.786    11    40   51   29   19    7   12  19  117  \n9    40 ...    0.882     9    41   50   24   13    3   10  18  104  \n10   51 ...    0.731     9    47   56   36    7    5   15  16  135  \n\n[10 rows x 27 columns]\n\nIn [149]: data = data[data.WL.notnull()]\n\nIn [150]: data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n\nIn [151]: data['Opp'] = data.apply(lambda x: x['MATCHUP'][-3:], axis=1)\n\nIn [152]: data\nOut[152]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n1   1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31  6  0.838  265   \n2   1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n3   1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n4   1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n5   1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n6   1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n7   1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n8   1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n9   1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n10  1610612744  0021600405  DEC 17, 2016  GSW vs. POR  W  24  4  0.857  240   \n\n    FGM ...   DREB  REB  AST  STL  BLK  TOV  PF  PTS   Away  Opp  \n1    41 ...     37   44   23    7    5   16  21  119  False  MEM  \n2    44 ...     31   39   31   14    9   15  20  125  False  POR  \n3    50 ...     31   43   33    7    2   13  14  127  False  DEN  \n4    42 ...     39   43   31    5    4   13  12  108  False  DAL  \n5    46 ...     42   51   33    4    9   20  16  121  False  TOR  \n6    37 ...     37   42   25    8    4   19  24  108   True  CLE  \n7    43 ...     37   41   35    9    2   22  21  119   True  DET  \n8    47 ...     40   51   29   19    7   12  19  117   True  BKN  \n9    40 ...     41   50   24   13    3   10  18  104  False  UTA  \n10   51 ...     47   56   36    7    5   15  16  135  False  POR  \n\n[10 rows x 29 columns]\n\nIn [153]: stat = var_view_map[y_axis.value]\n\nNameErrorTraceback (most recent call last)\n<ipython-input-153-a2cf61c90454> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73746174203d207661725f766965775f6d61705b795f617869732e76616c75655d0a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'y_axis' is not defined\n\nIn [154]: stat = 'AssertionError'\n\nIn [155]: stat = 'AST'\n\nIn [156]: selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n\nIn [157]: selection['color'] = selection.apply(color, axis=1)\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [158]: selection['alpha'] = selection.apply(alpha, axis=1)\n\nNameErrorTraceback (most recent call last)\n<ipython-input-158-7c9d74f60b96> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e5b27616c706861275d203d2073656c656374696f6e2e6170706c7928616c7068612c20617869733d31290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'alpha' is not defined\n\nIn [159]: from helper_funcs import color, alpha\n\nImportErrorTraceback (most recent call last)\n<ipython-input-159-f50c2483f2c1> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d2068656c7065725f66756e637320696d706f727420636f6c6f722c20616c7068610a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: cannot import name 'alpha'\n\nIn [160]: from helper_funcs import color, alpha\n\nImportErrorTraceback (most recent call last)\n<ipython-input-160-f50c2483f2c1> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d2068656c7065725f66756e637320696d706f727420636f6c6f722c20616c7068610a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: cannot import name 'alpha'\n\nIn [161]: from helper_funcs import _color, _alpha\n\nImportErrorTraceback (most recent call last)\n<ipython-input-161-d9b6f4fae40b> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d2068656c7065725f66756e637320696d706f7274205f636f6c6f722c205f616c7068610a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: cannot import name '_color'\n\nIn [162]: selection['x'] = list(range(first_game, last_game + 1))\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [163]: selection\nOut[163]: \n    Opp     GAME_DATE WL   Away  AST   color   x\n1   MEM  JAN 06, 2017  L  False   23    grey   1\n2   POR  JAN 04, 2017  W  False   31  orange   2\n3   DEN  JAN 02, 2017  W  False   33  orange   3\n4   DAL  DEC 30, 2016  W  False   31  orange   4\n5   TOR  DEC 28, 2016  W  False   33  orange   5\n6   CLE  DEC 25, 2016  L   True   25    grey   6\n7   DET  DEC 23, 2016  W   True   35  orange   7\n8   BKN  DEC 22, 2016  W   True   29  orange   8\n9   UTA  DEC 20, 2016  W  False   24  orange   9\n10  POR  DEC 17, 2016  W  False   36  orange  10\n\nIn [164]: first_game = 3\n\nIn [165]: data = TeamGameLogs(teams[team]).info()\n\nIn [166]: data = data.iloc[first_game:last_game + 1]\n\nIn [167]: data = data[data.WL.notnull()]\n\nIn [168]: data['Away'] = data.apply(lambda x: '@' in x['MATCHUP'], axis=1)\n\nIn [169]: data['Opp'] = data.apply(lambda x: x['MATCHUP'][-3:], axis=1)\n\nIn [170]: selection = data[['Opp', 'GAME_DATE', 'WL', 'Away', stat]]\n\nIn [171]: selection.shape\nOut[171]: (8, 5)\n\nIn [172]: list(range(first_game, last_game + 1))\n\nIn [173]: x = list(range(first_game, last_game + 1))\n\nIn [174]: x\nOut[174]: [3, 4, 5, 6, 7, 8, 9, 10]\n\nIn [174]: selection['x'] = list(range(first_game, last_game + 1))\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [176]: np.arr(range(1,4))\n\nAttributeErrorTraceback (most recent call last)\n<ipython-input-176-e4479c0f24c8> in <module>()\n----> 1 np.arr(range(1,4))\n\nAttributeError: module 'numpy' has no attribute 'arr'\n\nIn [177]: np.array(range(1,4))\nOut[177]: array([1, 2, 3])\n\nIn [178]: selection['x'] = np.array(range(first_game, last_game))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-178-e3f732e14583> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73656c656374696f6e5b2778275d203d206e702e61727261792872616e67652866697273745f67616d652c206c6173745f67616d6529290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in __setitem__(self, key, value)\n   2355         else:\n   2356             # set column\n-> 2357             self._set_item(key, value)\n   2358 \n   2359     def _setitem_slice(self, key, value):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _set_item(self, key, value)\n   2421 \n   2422         self._ensure_valid_index(value)\n-> 2423         value = self._sanitize_column(key, value)\n   2424         NDFrame._set_item(self, key, value)\n   2425 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/frame.py in _sanitize_column(self, key, value)\n   2576 \n   2577             # turn me into an ndarray\n-> 2578             value = _sanitize_index(value, self.index, copy=False)\n   2579             if not isinstance(value, (np.ndarray, Index)):\n   2580                 if isinstance(value, list) and len(value) > 0:\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/series.py in _sanitize_index(data, index, copy)\n   2768 \n   2769     if len(data) != len(index):\n-> 2770         raise ValueError('Length of values does not match length of ' 'index')\n   2771 \n   2772     if isinstance(data, PeriodIndex):\n\nValueError: Length of values does not match length of index\n\nIn [179]: selection['x'] = np.array(range(first_game, last_game + 1))\n/Users/baasman/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n\nIn [180]: selection\nOut[180]: \n    Opp     GAME_DATE WL   Away  AST   x\n3   DEN  JAN 02, 2017  W  False   33   3\n4   DAL  DEC 30, 2016  W  False   31   4\n5   TOR  DEC 28, 2016  W  False   33   5\n6   CLE  DEC 25, 2016  L   True   25   6\n7   DET  DEC 23, 2016  W   True   35   7\n8   BKN  DEC 22, 2016  W   True   29   8\n9   UTA  DEC 20, 2016  W  False   24   9\n10  POR  DEC 17, 2016  W  False   36  10\n\nIn [181]: data = TeamGameLogs(teams[team]).info()\n\nIn [182]: data\nOut[182]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n0   1610612744  0021600566  JAN 08, 2017    GSW @ SAC  W  32  6  0.842  240   \n1   1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31  6  0.838  265   \n2   1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n3   1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n4   1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n5   1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n6   1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n7   1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n8   1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n9   1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n10  1610612744  0021600405  DEC 17, 2016  GSW vs. POR  W  24  4  0.857  240   \n11  1610612744  0021600388  DEC 15, 2016  GSW vs. NYK  W  23  4  0.852  240   \n12  1610612744  0021600371  DEC 13, 2016    GSW @ NOP  W  22  4  0.846  240   \n13  1610612744  0021600358  DEC 11, 2016    GSW @ MIN  W  21  4  0.840  240   \n14  1610612744  0021600351  DEC 10, 2016    GSW @ MEM  L  20  4  0.833  240   \n15  1610612744  0021600335  DEC 08, 2016    GSW @ UTA  W  20  3  0.870  240   \n16  1610612744  0021600330  DEC 07, 2016    GSW @ LAC  W  19  3  0.864  240   \n17  1610612744  0021600314  DEC 05, 2016  GSW vs. IND  W  18  3  0.857  240   \n18  1610612744  0021600299  DEC 03, 2016  GSW vs. PHX  W  17  3  0.850  240   \n19  1610612744  0021600281  DEC 01, 2016  GSW vs. HOU  L  16  3  0.842  290   \n20  1610612744  0021600259  NOV 28, 2016  GSW vs. ATL  W  16  2  0.889  240   \n21  1610612744  0021600244  NOV 26, 2016  GSW vs. MIN  W  15  2  0.882  240   \n22  1610612744  0021600238  NOV 25, 2016    GSW @ LAL  W  14  2  0.875  240   \n23  1610612744  0021600223  NOV 23, 2016  GSW vs. LAL  W  13  2  0.867  240   \n24  1610612744  0021600202  NOV 21, 2016    GSW @ IND  W  12  2  0.857  240   \n25  1610612744  0021600191  NOV 19, 2016    GSW @ MIL  W  11  2  0.846  240   \n26  1610612744  0021600179  NOV 18, 2016    GSW @ BOS  W  10  2  0.833  240   \n27  1610612744  0021600165  NOV 16, 2016    GSW @ TOR  W   9  2  0.818  240   \n28  1610612744  0021600143  NOV 13, 2016  GSW vs. PHX  W   8  2  0.800  240   \n29  1610612744  0021600119  NOV 10, 2016    GSW @ DEN  W   7  2  0.778  240   \n30  1610612744  0021600116  NOV 09, 2016  GSW vs. DAL  W   6  2  0.750  240   \n31  1610612744  0021600099  NOV 07, 2016  GSW vs. NOP  W   5  2  0.714  240   \n32  1610612744  0021600078  NOV 04, 2016    GSW @ LAL  L   4  2  0.667  240   \n33  1610612744  0021600069  NOV 03, 2016  GSW vs. OKC  W   4  1  0.800  240   \n34  1610612744  0021600054  NOV 01, 2016    GSW @ POR  W   3  1  0.750  240   \n35  1610612744  0021600036  OCT 30, 2016    GSW @ PHX  W   2  1  0.667  240   \n36  1610612744  0021600025  OCT 28, 2016    GSW @ NOP  W   1  1  0.500  240   \n37  1610612744  0021600003  OCT 25, 2016  GSW vs. SAS  L   0  1  0.000  240   \n\n    FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0    45 ...    0.850    13    33   46   33   11    6   17  22  117  \n1    41 ...    0.744     7    37   44   23    7    5   16  21  119  \n2    44 ...    0.828     8    31   39   31   14    9   15  20  125  \n3    50 ...    0.762    12    31   43   33    7    2   13  14  127  \n4    42 ...    0.867     4    39   43   31    5    4   13  12  108  \n5    46 ...    0.833     9    42   51   33    4    9   20  16  121  \n6    37 ...    0.862     5    37   42   25    8    4   19  24  108  \n7    43 ...    0.917     4    37   41   35    9    2   22  21  119  \n8    47 ...    0.786    11    40   51   29   19    7   12  19  117  \n9    40 ...    0.882     9    41   50   24   13    3   10  18  104  \n10   51 ...    0.731     9    47   56   36    7    5   15  16  135  \n11   45 ...    0.500    15    42   57   41    7   10   17  17  103  \n12   42 ...    0.789     9    36   45   30    6    5   12  12  113  \n13   38 ...    0.900     6    31   37   30    9    4    8  24  116  \n14   34 ...    0.600    10    32   42   15    6    8   23  23   89  \n15   39 ...    0.696     9    38   47   26   10    4   16  23  106  \n16   42 ...    0.828    12    33   45   32   12    4   11  24  115  \n17   54 ...    0.769    16    38   54   45   12   13   11  22  142  \n18   49 ...    0.765     6    32   38   37    9    5   17  19  138  \n19   43 ...    0.784    13    41   54   31   12    7   17  27  127  \n20   37 ...    0.792     7    34   41   25    6   10   14  20  105  \n21   45 ...    0.824    12    33   45   25    9    8   18  14  115  \n22   43 ...    0.706     4    40   44   31   10   10   17  21  109  \n23   53 ...    0.686     6    42   48   47    7    5   10  20  149  \n24   40 ...    0.844    12    48   60   31    9   10   12  17  120  \n25   42 ...    0.813    18    27   45   30    8    5   12  25  124  \n26   44 ...    0.583     9    41   50   33   10    7   11  20  104  \n27   44 ...    0.929     7    28   35   33    9    7   12  25  127  \n28   45 ...    0.871     8    35   43   32    8    7   16  20  133  \n29   46 ...    0.950     9    35   44   33   15    6   15  18  125  \n30   43 ...    0.591     5    34   39   33    3    5   15  22  116  \n31   45 ...    0.833    10    28   38   35   14    4   15  17  116  \n32   39 ...    0.700     9    31   40   26   13    3   20  13   97  \n33   46 ...    0.800    15    31   46   27    9   14   15  18  122  \n34   50 ...    0.739     7    38   45   36   14    4   16  19  127  \n35   35 ...    0.848     7    36   43   27    6    5   15  23  106  \n36   44 ...    0.893     9    40   49   32    8    2   14  22  122  \n37   40 ...    0.722     8    27   35   24   11    6   16  19  100  \n\n[38 rows x 27 columns]\n\nIn [183]: data.columns\nOut[183]: \nIndex(['Team_ID', 'Game_ID', 'GAME_DATE', 'MATCHUP', 'WL', 'W', 'L', 'W_PCT',\n       'MIN', 'FGM', 'FGA', 'FG_PCT', 'FG3M', 'FG3A', 'FG3_PCT', 'FTM', 'FTA',\n       'FT_PCT', 'OREB', 'DREB', 'REB', 'AST', 'STL', 'BLK', 'TOV', 'PF',\n       'PTS'],\n      dtype='object')\n\nIn [184]: data.FGM.describe()\nOut[184]: \ncount    38.000000\nmean     43.500000\nstd       4.607573\nmin      34.000000\n25%      40.250000\n50%      43.500000\n75%      45.750000\nmax      54.000000\nName: FGM, dtype: float64\n\nIn [185]: d = data.FGM.describe()\n\nIn [186]: d\nOut[186]: \ncount    38.000000\nmean     43.500000\nstd       4.607573\nmin      34.000000\n25%      40.250000\n50%      43.500000\n75%      45.750000\nmax      54.000000\nName: FGM, dtype: float64\n\nIn [187]: d['count']\nOut[187]: 38.0\n\nIn [188]: d['25%']\nOut[188]: 40.25\n\nIn [189]: from bokeh.models.widgets import Slider, Select, Button, DataTable\n\nIn [190]: help(layout)\nHelp on function layout in module bokeh.layouts:\n\nlayout(*args, **kwargs)\n    Create a grid-based arrangement of Bokeh Layout objects. Forces all objects to\n    have the same sizing mode, which is required for complex layouts to work. Returns a nested set\n    of Rows and Columns.\n    \n    Args:\n        children (list of lists of :class:`~bokeh.models.layouts.LayoutDOM` ): A list of lists of instances\n            for a grid layout. Can be any of the following - :class:`~bokeh.models.plots.Plot`,\n            :class:`~bokeh.models.widgets.widget.Widget`, :class:`~bokeh.models.layouts.WidgetBox`,\n            :class:`~bokeh.models.layouts.Row`,\n            :class:`~bokeh.models.layouts.Column`,\n            :class:`~bokeh.models.tools.ToolbarBox`,\n            :class:`~bokeh.models.layouts.Spacer`.\n    \n        sizing_mode (``\"fixed\"``, ``\"stretch_both\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"`` ): How\n            will the items in the layout resize to fill the available space.\n            Default is ``\"fixed\"``. For more information on the different\n            modes see :attr:`~bokeh.models.layouts.LayoutDOM.sizing_mode`\n            description on :class:`~bokeh.models.layouts.LayoutDOM`.\n    \n        responsive (``True``, ``False``): True sets ``sizing_mode`` to\n            ``\"width_ar\"``. ``False`` sets sizing_mode to ``\"fixed\"``. Using\n            responsive will override sizing_mode.\n    \n    Returns:\n        Column: A column of ``Row`` layouts of the children, all with the same sizing_mode.\n    \n    Examples:\n    \n        >>> layout([[plot_1, plot_2], [plot_3, plot_4]])\n        >>> layout(\n                children=[\n                    [widget_box_1, plot_1],\n                    [slider],\n                    [widget_box_2, plot_2, plot_3]\n                ],\n                sizing_mode='fixed',\n            )\n\n\nIn [191]: import numpy as np\n\nfrom bokeh.models import ColumnDataSource, DataRange1d, Plot, LinearAxis, Grid\nfrom bokeh.models.glyphs import HBar\nfrom bokeh.io import curdoc, show\n\nN = 9\ny = np.linspace(-2, 2, N)\nx = y**2\n\nsource = ColumnDataSource(dict(y=y, right=x,))\n\nxdr = DataRange1d()\nydr = DataRange1d()\n\nplot = Plot(\n    title=None, x_range=xdr, y_range=ydr, plot_width=300, plot_height=300,\n    h_symmetry=False, v_symmetry=False, min_border=0, toolbar_location=None)\n\nglyph = HBar(y=\"y\", right=\"right\", left=0, height=0.5, fill_color=\"#b3de69\")\nplot.add_glyph(source, glyph)\n\nxaxis = LinearAxis()\nplot.add_layout(xaxis, 'below')\n\nyaxis = LinearAxis()\nplot.add_layout(yaxis, 'left')\n\nplot.add_layout(Grid(dimension=0, ticker=xaxis.ticker))\nplot.add_layout(Grid(dimension=1, ticker=yaxis.ticker))\n\ncurdoc().add_root(plot)\n\nshow(plot)\n\nImportErrorTraceback (most recent call last)\n<ipython-input-191-967d79a51ee6> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"696d706f7274206e756d7079206173206e700a0a66726f6d20626f6b65682e6d6f64656c7320696d706f727420436f6c756d6e44617461536f757263652c204461746152616e676531642c20506c6f742c204c696e656172417869732c20477269640a66726f6d20626f6b65682e6d6f64656c732e676c7970687320696d706f727420484261720a66726f6d20626f6b65682e696f20696d706f727420637572646f632c2073686f770a0a4e203d20390a79203d206e702e6c696e7370616365282d322c20322c204e290a78203d20792a2a320a0a736f75726365203d20436f6c756d6e44617461536f75726365286469637428793d792c2072696768743d782c29290a0a786472203d204461746152616e6765316428290a796472203d204461746152616e6765316428290a0a706c6f74203d20506c6f74280a202020207469746c653d4e6f6e652c20785f72616e67653d7864722c20795f72616e67653d7964722c20706c6f745f77696474683d3330302c20706c6f745f6865696768743d3330302c0a20202020685f73796d6d657472793d46616c73652c20765f73796d6d657472793d46616c73652c206d696e5f626f726465723d302c20746f6f6c6261725f6c6f636174696f6e3d4e6f6e65290a0a676c797068203d204842617228793d2279222c2072696768743d227269676874222c206c6566743d302c206865696768743d302e352c2066696c6c5f636f6c6f723d222362336465363922290a706c6f742e6164645f676c79706828736f757263652c20676c797068290a0a7861786973203d204c696e6561724178697328290a706c6f742e6164645f6c61796f75742878617869732c202762656c6f7727290a0a7961786973203d204c696e6561724178697328290a706c6f742e6164645f6c61796f75742879617869732c20276c65667427290a0a706c6f742e6164645f6c61796f757428477269642864696d656e73696f6e3d302c207469636b65723d78617869732e7469636b657229290a706c6f742e6164645f6c61796f757428477269642864696d656e73696f6e3d312c207469636b65723d79617869732e7469636b657229290a0a637572646f6328292e6164645f726f6f7428706c6f74290a0a73686f7728706c6f74290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: cannot import name 'HBar'\n\nIn [192]: data.AST.describe\nOut[192]: \n<bound method NDFrame.describe of 0     33\n1     23\n2     31\n3     33\n4     31\n5     33\n6     25\n7     35\n8     29\n9     24\n10    36\n11    41\n12    30\n13    30\n14    15\n15    26\n16    32\n17    45\n18    37\n19    31\n20    25\n21    25\n22    31\n23    47\n24    31\n25    30\n26    33\n27    33\n28    32\n29    33\n30    33\n31    35\n32    26\n33    27\n34    36\n35    27\n36    32\n37    24\nName: AST, dtype: int64>\n\nIn [193]: data.AST.describe()\nOut[193]: \ncount    38.000000\nmean     31.052632\nstd       5.963617\nmin      15.000000\n25%      27.000000\n50%      31.000000\n75%      33.000000\nmax      47.000000\nName: AST, dtype: float64\n\nIn [194]: x=data.AST.describe()\n\nIn [195]: x\nOut[195]: \ncount    38.000000\nmean     31.052632\nstd       5.963617\nmin      15.000000\n25%      27.000000\n50%      31.000000\n75%      33.000000\nmax      47.000000\nName: AST, dtype: float64\n\nIn [196]: type(x['count'])\nOut[196]: numpy.float64\n\nIn [197]: [i for i in x]\nOut[197]: [38.0, 31.05263157894737, 5.9636165719598537, 15.0, 27.0, 31.0, 33.0, 47.0]\n\nIn [198]: x=list(data.AST.describe())\n\nIn [199]: x\nOut[199]: [38.0, 31.05263157894737, 5.9636165719598537, 15.0, 27.0, 31.0, 33.0, 47.0]\n\nIn [200]: type(data.AST.describe())\nOut[200]: pandas.core.series.Series\n\nIn [201]: type(data.AST.describe().values)\nOut[201]: numpy.ndarray\n\nIn [202]: data.AST.describe()['count']\nOut[202]: 38.0\n\nIn [203]: type(data.AST.describe()['count'])\nOut[203]: numpy.float64\n\nIn [204]: data.AST.describe()['max']\nOut[204]: 47.0\n\nIn [205]: import numpy as np\n\nIn [206]: array = np.random.rand(10)\n\nIn [207]: array\nOut[207]: \narray([ 0.18985748,  0.72574918,  0.2969743 ,  0.74598546,  0.98744582,\n        0.39773593,  0.81069552,  0.36739791,  0.67435882,  0.40352137])\n\nIn [208]: array.shape\nOut[208]: (10,)\n\nIn [209]: array = np.random.rand(10000000)\n\nIn [210]: array.shape\nOut[210]: (10000000,)\n\nIn [211]: array.shape[0]\nOut[211]: 10000000\n\nIn [212]: i = 0\n\nIn [213]: array.shape[0] / 5\nOut[213]: 2000000.0\n\nIn [214]: sums = []\ncounts = []\n\nfor i in range(array.shape[0] / 5):\n    chunk = array[2000000 * i, 2000000 * (i + 1)]\n    chunk = chunk[chunk > 0]\n    sums.append(snp.sum(chunk))\n    counts.append(len(chunk))\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-214-aede0e3c6b1d> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73756d73203d205b5d0a636f756e7473203d205b5d0a0a666f72206920696e2072616e67652861727261792e73686170655b305d202f2035293a0a202020206368756e6b203d2061727261795b32303030303030202a20692c2032303030303030202a202869202b2031295d0a202020206368756e6b203d206368756e6b5b6368756e6b203e20305d0a2020202073756d732e617070656e6428736e702e73756d286368756e6b29290a20202020636f756e74732e617070656e64286c656e286368756e6b29290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: 'float' object cannot be interpreted as an integer\n\nIn [215]: import dask\n\nIn [216]: ",
			"settings":
			{
				"buffer_size": 79288,
				"line_ending": "Unix",
				"name": "*REPL* [python]",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/SublimeREPL-python.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 47.0,
		"last_filter": "syntax: pyth",
		"selected_items":
		[
			[
				"syntax: pyth",
				"Set Syntax: Python"
			],
			[
				"markdo",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git ignor",
				"Git: Update Project Ignored Files"
			],
			[
				"repl: ipy",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: ipyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: ip",
				"SublimeREPL: Python - IPython"
			],
			[
				"sync",
				"SFTP: Sync Local -> Remote…"
			],
			[
				"indent",
				"Indentation: Convert to Spaces"
			],
			[
				"indent ",
				"Indentation: Convert to Spaces"
			],
			[
				"repl: ipyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: r",
				"SublimeREPL: R"
			],
			[
				"repl: pyth",
				"SublimeREPL: Python"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"syntax: rex",
				"Set Syntax: R Extended"
			],
			[
				"syntax: pt",
				"Set Syntax: Python"
			],
			[
				"syntax: pyt",
				"Set Syntax: Python"
			],
			[
				"build wi",
				"Build: New Build System"
			],
			[
				"syntax: scala",
				"Set Syntax: Scala"
			],
			[
				"syntax: javasc",
				"Set Syntax: JavaScript"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"syntax: pytho",
				"Set Syntax: Python"
			],
			[
				"anaconda: set ",
				"Anaconda: Set Python interpreter"
			],
			[
				"text pastry: ",
				"Text Pastry: From 1 To X"
			],
			[
				"repl: she",
				"SublimeREPL: Shell"
			],
			[
				"repl: pyth\t",
				"SublimeREPL: Python - IPython"
			],
			[
				"syntax: she",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"repl: pyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"git: ",
				"Git: Gui"
			],
			[
				"gitig",
				"Gitignore: New gitignore"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"syntax: shel",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"repl: shel",
				"SublimeREPL: Shell"
			],
			[
				"repl: shel\t",
				"SublimeREPL: Shell"
			],
			[
				"set syntax: pytho",
				"Set Syntax: Python"
			],
			[
				"key bin",
				"Preferences: Key Bindings"
			],
			[
				"setting",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"indentat",
				"Indentation: Convert to Spaces"
			],
			[
				"whit",
				"Whitespace: Remove Trailing Whitespace"
			],
			[
				"set syntax: jso",
				"Set Syntax: JSON"
			],
			[
				"set syntax: she",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"set syntax: html",
				"Set Syntax: HTML"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"repl: python",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: shell",
				"SublimeREPL: Shell"
			],
			[
				"set syntax: pyth\t",
				"Set Syntax: Python"
			],
			[
				"REPL: shel",
				"SublimeREPL: Shell"
			],
			[
				"REPL: R",
				"SublimeREPL: R"
			],
			[
				"syntax: R",
				"Set Syntax: R"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"preference",
				"Preferences: Browse Packages"
			],
			[
				"REPL: pyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"syntax",
				"Set Syntax: Markdown"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/baasman/Documents/python-workspace/nba_viz"
	],
	"file_history":
	[
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Anaconda/Default (OSX).sublime-keymap",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/Users/baasman/Documents/python-workspace/nba_viz/README.md",
		"/Users/baasman/Documents/python-workspace/nba_viz/.gitignore",
		"/Users/baasman/Documents/python-workspace/nba_viz/theme.yaml",
		"/Users/baasman/Documents/python-workspace/movies/testnba.py",
		"/Users/baasman/Documents/python-workspace/nba_viz/constants.py",
		"/Users/baasman/Documents/python-workspace/movies/main.py",
		"/Users/baasman/Documents/python-workspace/movies/query.py",
		"/Users/baasman/Documents/python-workspace/nba_viz/__init__.py",
		"/Users/baasman/Documents/python-workspace/movies/description.html",
		"/Users/baasman/Documents/python-workspace/nba_viz/constants",
		"/Users/baasman/Documents/python-workspace/testmac/stylin.py",
		"/Users/baasman/Documents/python-workspace/movies/query.sql",
		"/Users/baasman/Documents/python-workspace/movies/genres.txt",
		"/Users/baasman/Documents/python-workspace/testmac/widgets.py",
		"/Users/baasman/Documents/python-workspace/testmac/interactions.py",
		"/Users/baasman/Documents/python-workspace/testmac/datasource.py",
		"/Users/baasman/Documents/python-workspace/testmac/testbokeh.py",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/chapter16.py",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/chapter15.py",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/deeplearning.sublime-project",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/sonar.csv",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/pima-indians-diabetes.csv",
		"/Users/baasman/Documents/python-workspace/microblog/microblog.sublime-project",
		"/Users/baasman/Documents/python-workspace/flaskr/MANIFEST.in",
		"/Users/baasman/Documents/python-workspace/flaskr/flaskr/__init__.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SendREPL/SendREPL (OSX).sublime-settings",
		"/Users/baasman/Documents/python-workspace/pyspark_tests/test.r",
		"/Users/baasman/Documents/python-workspace/pyspark_tests/__init__.py",
		"/Users/baasman/spark-2.0.2-bin-hadoop2.7/python/run-tests.py",
		"/Users/baasman/spark-2.0.2-bin-hadoop2.7/README.md",
		"/Users/baasman/Downloads/run_all2016-12-23_16.log",
		"/Users/baasman/Documents/python-workspace/hot_gym/Rec Center_out.csv",
		"/Users/baasman/Documents/python-workspace/hot_gym/model_params/__init__.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/model_params/model_params.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/swarm/description.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/hot_gym.sublime-project",
		"/Users/baasman/Documents/python-workspace/nupic/nupic.sublime-project",
		"/Users/baasman/Documents/python-workspace/nupic/test.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SublimeREPL/project_venv_repls.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/items.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/models.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/pipelines.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/worst_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/utility.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/settings.py",
		"/Users/baasman/.bash_profile",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_albums.jl",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/scrapy.cfg",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/.gitignore",
		"/Users/baasman/.vimrc",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/__init__.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper.sublime-project",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/top_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_music_charts",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes_spider.py",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes.json",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes-2.html",
		"/Users/baasman/Documents/python-workspace/bokeh/bokeh_tutorial.py",
		"/Users/baasman/Documents/r-workspace/test_sub.R",
		"/Users/baasman/Documents/python-workspace/pyprogeny/README.md",
		"/Users/baasman/Documents/python-workspace/pyprogeny/pyprogeny.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Pylinter/Pylinter.sublime-settings",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/User/SublimeREPL-python.sublime-build",
		"/Users/baasman/Documents/test.py",
		"/Users/baasman/Documents/python-workspace/test.py",
		"/Users/baasman/Downloads/pyprogeny.py",
		"/Users/baasman/Documents/python-workspace/pyprogeny/.gitignore",
		"/Users/baasman/Documents/python-workspace/django/fish_love/fish_love/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/polls/style.css",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/polls/index.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/admin.py",
		"/Users/baasman/Documents/python-workspace/django/cocktail/collect_cocktail/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/templates/base_site.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/fish_love/settings.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/models.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/detail.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/views.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/index.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/style.css",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/results.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/tests.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"1000",
			"data_table",
			"type",
			"mean",
			"Mean",
			"field",
			"mean",
			"int",
			"games",
			"averages",
			"max",
			"Downloads",
			"grid",
			"_layout",
			"len",
			"source_average",
			"mean",
			" ",
			"mean",
			"median",
			"mean",
			"red",
			"green",
			"444444",
			"2F2F2F",
			"grey",
			"orange",
			"index",
			"Opponent",
			"@",
			"'@",
			"WL",
			"view_data",
			"y_axis",
			"column",
			"layout",
			"circle",
			"orange",
			"color",
			"DateRangeSlider",
			"df",
			"Win",
			"1950",
			"='",
			"season",
			"max_year",
			"min_year",
			"1970",
			"2014",
			"released",
			"max_year",
			"LEAGUE_ID",
			"layout",
			"All",
			"400",
			"wid",
			"p",
			"widgets.py",
			"team",
			"index",
			"circle",
			"plot_height",
			"navy",
			"data",
			"warriors",
			"cavs",
			"90",
			"87",
			"100",
			"cavs",
			"warriors",
			"line",
			"points",
			"np",
			"password",
			"create_baseline",
			"relu",
			"accuracy",
			"val_acc",
			"acc",
			"start_session",
			"_cards",
			"value",
			"terminal",
			"medium",
			"MODEL_PARAMS",
			"pas",
			"import",
			"medium",
			"baasman",
			"settings",
			"create_topalbums_table",
			"postgres",
			"from",
			"RYM_rating",
			"models",
			"SomePipeline",
			"create_deals_table",
			"response_status_cou",
			"str",
			"scrapy",
			"Artist",
			"()",
			"artist",
			"scrapy",
			"i",
			"div",
			"shell",
			", ",
			"page",
			"http",
			"page",
			"petal_width",
			"petal_length",
			"x",
			"p = figure()\np.circle('x', 'y', source=source, size=20)\nshow(p)\n",
			"square",
			"line_color",
			"circle",
			"from",
			"path",
			":\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"RYMRating"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "constants.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1108,
						"regions":
						{
						},
						"selection":
						[
							[
								917,
								917
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1106,
										1107
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										627,
										628
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3631,
						"regions":
						{
						},
						"selection":
						[
							[
								3061,
								3061
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3109,
										3110
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2842,
										2843
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"open_with_edit": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1013.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/baasman/Documents/python-workspace/dask_practice.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 307,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										304,
										305
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										300,
										301
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/baasman/Documents/python-workspace/movies/testnba.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 341,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "helper_funcs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 197,
						"regions":
						{
						},
						"selection":
						[
							[
								197,
								197
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"open_with_edit": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79288,
						"regions":
						{
						},
						"selection":
						[
							[
								78354,
								78347
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"default_dir": "/Users/baasman/Documents/python-workspace/nba_viz",
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"incomplete_sync": null,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "python",
							"repl_id": "74f189f406904d1599461e33d4a7b606",
							"repl_restart_args":
							{
								"autocomplete_server": true,
								"cmd":
								{
									"linux":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									],
									"osx":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									],
									"windows":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									]
								},
								"cwd": "$file_path",
								"encoding": "utf8",
								"extend_env":
								{
									"PYTHONIOENCODING": "utf-8",
									"SUBLIMEREPL_EDITOR": "subl -w"
								},
								"external_id": "python",
								"syntax": "Packages/Python/Python.tmLanguage",
								"type": "subprocess"
							},
							"repl_sublime2": false,
							"smart_indent": false,
							"spell_check": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34390.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.697507267442,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 230.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"output.loghighlight":
	{
		"height": 100.0
	},
	"output.sftp":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "nba_viz.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/r-workspace/test_sub.R"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/python-workspace/microblog/microblog.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 47.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 176.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
