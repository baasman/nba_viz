{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"to",
				"teams.tolist"
			],
			[
				"dat",
				"date_range\tstatement"
			],
			[
				"Dat",
				"DateRangeSlider"
			],
			[
				"select",
				"select_movies\tfunction"
			],
			[
				"genr",
				"genre_val\tstatement"
			],
			[
				"dir",
				"dirname\tfunction"
			],
			[
				"size",
				"size_mapper\tstatement"
			],
			[
				"y",
				"y_axis_label"
			],
			[
				"plot",
				"plot_width"
			],
			[
				"call",
				"callback\tstatement"
			],
			[
				"get",
				"get_custom_hover\timport"
			],
			[
				"bo",
				"bokeh"
			],
			[
				"enc",
				"enc_y"
			],
			[
				"cross_va",
				"cross_val_score"
			],
			[
				"setu",
				"setuptools\tmodule"
			],
			[
				"ses",
				"sessionmaker"
			],
			[
				"table",
				"engine.table_names"
			],
			[
				"s",
				"suit"
			],
			[
				"suit",
				"suit_values\tstatement"
			],
			[
				"F",
				"FrenchDeck\tclass"
			],
			[
				"sum",
				"sum_counts\tstatement"
			],
			[
				"keyva",
				"keyvalue\tstatement"
			],
			[
				"keyval",
				"keyvalue_duration\tstatement"
			],
			[
				"norm",
				"normal_key_interactions"
			],
			[
				"con",
				"conf"
			],
			[
				"Spar",
				"SparkContext\timport"
			],
			[
				"confi",
				"configure_spark\tfunction"
			],
			[
				"input",
				"inputFile\tstatement"
			],
			[
				"Nu",
				"NuPICFileOutput\tclass"
			],
			[
				"nu",
				"nupic_output\tmodule"
			],
			[
				"model",
				"model_params\tparam"
			],
			[
				"mo",
				"MODEL_PARAMS\timport"
			],
			[
				"csv",
				"csvReader\tstatement"
			],
			[
				"mde",
				"modelFactory\timport"
			],
			[
				"swarm",
				"swarmWorkDir\tstatement"
			],
			[
				"sw",
				"swarmWorkDir\tstatement"
			],
			[
				"create",
				"create_worstalbums_table\tfunction"
			],
			[
				"utc",
				"utcnow\tfunction"
			],
			[
				"remove",
				"removeParenthesis\tfunction"
			],
			[
				"re",
				"removeParenthesis\tfunction"
			],
			[
				"topal",
				"topalbums\tstatement"
			],
			[
				"crea",
				"create_topalbums_table\tfunction"
			],
			[
				"cre",
				"create_deals_table\tfunction"
			],
			[
				"decla",
				"declarative_base\timport"
			],
			[
				"sql",
				"sqlalchemy"
			],
			[
				"R",
				"RYM_rating"
			],
			[
				"next",
				"next_page\tstatement"
			],
			[
				"fin",
				"find_between"
			],
			[
				"chart",
				"chart_detail_l2\tstatement"
			],
			[
				"cha",
				"chart_detail_l2\tstatement"
			],
			[
				"char",
				"chart_detail_l1\tstatement"
			],
			[
				"nex",
				"next_page\tstatement"
			],
			[
				"url",
				"urljoin"
			],
			[
				"hm",
				"humor"
			],
			[
				"extra",
				"extract_with_css\tfunction"
			],
			[
				"ex",
				"extract_first"
			],
			[
				"per",
				"elements.period"
			],
			[
				"py",
				"pyplot\tmodule"
			],
			[
				"Choice",
				"ChoiceInline"
			],
			[
				"pub",
				"pub_date"
			],
			[
				"HttpR",
				"HttpResponseRedirect"
			],
			[
				"Http",
				"HttpResponse"
			],
			[
				"selec",
				"selected_choice"
			],
			[
				"question",
				"question_id"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/baasman/Documents/python-workspace/movies/main.py",
			"settings":
			{
				"buffer_size": 4309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from nba_py.player import PlayerList\nfrom nba_py.game import BoxscoreSummary\nimport nba_py\nfrom nba_py.team import _TeamDashboard, TeamGameLogs, TeamList\n\ntl = TeamList().info()\nteams = tl.ABBREVIATION[:30].values\ncodes = tl.TEAM_ID[:30].values\nd = dict((key, value) for key, value in zip(teams, codes))\n\n data = TeamGameLogs(d['GSW']).info()",
			"file": "/Users/baasman/Documents/python-workspace/movies/testnba.py",
			"file_size": 338,
			"file_write_time": 131283948160000000,
			"settings":
			{
				"buffer_size": 342,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "from"
			}
		},
		{
			"file": "constants.py",
			"settings":
			{
				"buffer_size": 644,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import numpy as np\nfrom constants import teams\nfrom nba_py.team import TeamGameLogs\n\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import layout, widgetbox, column\nfrom bokeh.models import ColumnDataSource, HoverTool, Div\nfrom bokeh.models.widgets import Slider, Select, TextInput, DateRangeSlider, Button, Paragraph\nfrom bokeh.io import curdoc\nfrom datetime import datetime\n\nteam_options = list(teams.keys())\n\nbegin = Slider(title=\"First game\", start=1,\n               end=82, value=82, step=1)\nend = Slider(title=\"Last game\", start=1,\n             end=82, value=82, step=1)\nteam = Select(title='Team', value='GSW', options=team_options)\nxaxis = \n\n\nview_data = Button(label='BIG GREEN BUTTON!', button_type='success')\n\n\ndef select_data():\n    first_game = begin.value\n    last_game = end.value\n    team = team.value\n\n\ndef update():\n    pass\n\n\nview_data.on_click(update)\n\nlayout = column(begin, end, team, view_data)\n\ncurdoc().add_root(layout)\ncurdoc().title = 'I luh Behball'\n",
			"file": "main.py",
			"file_size": 959,
			"file_write_time": 131284024200000000,
			"settings":
			{
				"buffer_size": 1010,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Jupyter Console 4.1.1\n\n\nIn [1]: import pandas as pd\n\nIn [2]: x = pd.read_csv('https://raw.githubusercontent.com/bokeh/bokeh/master/examples/app/movies/razzies-clean.csv')\n\nIn [3]: x\nOut[3]: \n     TITLE_ID\n0   tt4009460\n1   tt1333125\n2   tt1673434\n3   tt0810913\n4   tt0938283\n5   tt1055369\n6   tt0811138\n7   tt0897361\n8   tt0430912\n9   tt0327643\n10  tt0327554\n11  tt0299930\n12  tt0291502\n13  tt0240515\n14  tt0185183\n15  tt0120891\n16  tt0118577\n17  tt0119925\n18  tt0117765\n19  tt0114436\n20  tt0109456\n21  tt0107211\n22  tt0105391\n23  tt0102070\n24  tt0098987\n25  tt0098382\n26  tt0094889\n27  tt0093405\n28  tt0091225\n29  tt0089880\n30  tt0086987\n31  tt0085863\n32  tt0084132\n33  tt0082766\n34  tt0080492\n\nIn [4]: x.to_csv('razzies-clean.csv')\n\nIn [5]: import os\n\nimport numpy as np\nimport pandas.io.sql as psql\nimport sqlite3 as sql\n\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import layout, widgetbox\nfrom bokeh.models import ColumnDataSource, HoverTool, Div\nfrom bokeh.models.widgets import Slider, Select, TextInput\nfrom bokeh.io import curdoc\nfrom bokeh.sampledata.movies_data import movie_path\n\nIn [6]: movie_path\nOut[6]: '/Users/baasman/.bokeh/data/movies.db'\n\nIn [7]: conn = sql.connect(movie_path)\n\nIn [8]: conn\nOut[8]: <sqlite3.Connection at 0x104a26d50>\n\nIn [9]: dir(conn)\nOut[9]: \n['DataError',\n 'DatabaseError',\n 'Error',\n 'IntegrityError',\n 'InterfaceError',\n 'InternalError',\n 'NotSupportedError',\n 'OperationalError',\n 'ProgrammingError',\n 'Warning',\n '__call__',\n '__class__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__enter__',\n '__eq__',\n '__exit__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__le__',\n '__lt__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'close',\n 'commit',\n 'create_aggregate',\n 'create_collation',\n 'create_function',\n 'cursor',\n 'execute',\n 'executemany',\n 'executescript',\n 'in_transaction',\n 'interrupt',\n 'isolation_level',\n 'iterdump',\n 'rollback',\n 'row_factory',\n 'set_authorizer',\n 'set_progress_handler',\n 'set_trace_callback',\n 'text_factory',\n 'total_changes']\n\nIn [10]: conn.execute('select * from Oscars')\n\nOperationalErrorTraceback (most recent call last)\n<ipython-input-10-ae62036360be> in <module>()\n----> 1 conn.execute('select * from Oscars')\n\nOperationalError: no such table: Oscars\n\nIn [11]: conn.execute('select * from omdb')\nOut[11]: <sqlite3.Cursor at 0x117203960>\n\nIn [12]: c = conn.execute('select * from omdb')\n\nIn [13]: dir(c)\nOut[13]: \n['__class__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__iter__',\n '__le__',\n '__lt__',\n '__ne__',\n '__new__',\n '__next__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'arraysize',\n 'close',\n 'connection',\n 'description',\n 'execute',\n 'executemany',\n 'executescript',\n 'fetchall',\n 'fetchmany',\n 'fetchone',\n 'lastrowid',\n 'row_factory',\n 'rowcount',\n 'setinputsizes',\n 'setoutputsize']\n\nIn [14]: c.fetchall()[0]\nOut[14]: \n(4972,\n 'tt0004972',\n 'The Birth of a Nation',\n 1915,\n 'Not Rated',\n 165.0,\n 'Drama, History, Romance',\n '1915-03-03',\n 'D.W. Griffith',\n 'Thomas F. Dixon Jr. (adapted from his novel: \"The Clansman: An Historical Romance of the Ku Klux Klan\"), Thomas F. Dixon Jr. (play), Thomas F. Dixon Jr. (novel), D.W. Griffith, Frank E. Woods',\n 'Lillian Gish, Mae Marsh, Henry B. Walthall, Miriam Cooper',\n None,\n 6.9,\n 13793,\n None,\n 'USA',\n '1 win.',\n '2014-03-31 02:13:23.440000000',\n 0)\n\nIn [15]: query = open(join(dirname(__file__), 'query.sql')).read()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-15-9f32b5589a21> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"7175657279203d206f70656e286a6f696e286469726e616d65285f5f66696c655f5f292c202771756572792e73716c2729292e7265616428290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'join' is not defined\n\nIn [16]: from os.path import dirname, join\n\nIn [17]: query = open(join(dirname(__file__), 'query.sql')).read()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-17-9f32b5589a21> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"7175657279203d206f70656e286a6f696e286469726e616d65285f5f66696c655f5f292c202771756572792e73716c2729292e7265616428290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name '__file__' is not defined\n\nIn [18]: join('sqlite://', movie_path)\nOut[18]: '/Users/baasman/.bokeh/data/movies.db'\n\nIn [19]: ''.join(['sqlite://', movie_path])\nOut[19]: 'sqlite:///Users/baasman/.bokeh/data/movies.db'\n\nIn [20]: ''.join(['sqlite:/', movie_path])\nOut[20]: 'sqlite://Users/baasman/.bokeh/data/movies.db'\n\nIn [21]: ''.join(['sqlite:/', movie_path])engine = create_engine(''.join(['sqlite:/', movie_path]))\n\nNameErrorTraceback (most recent call last)\n<ipython-input-21-3987770b4759> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"656e67696e65203d206372656174655f656e67696e652827272e6a6f696e285b2773716c6974653a2f272c206d6f7669655f706174685d29290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'create_engine' is not defined\n\nIn [22]: from sqlalchemy import *\n\nIn [23]: engine = create_engine(''.join(['sqlite:/', movie_path]))\n\nArgumentErrorTraceback (most recent call last)\n<ipython-input-23-3987770b4759> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"656e67696e65203d206372656174655f656e67696e652827272e6a6f696e285b2773716c6974653a2f272c206d6f7669655f706174685d29290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/sqlalchemy/engine/__init__.py in create_engine(*args, **kwargs)\n    385     strategy = kwargs.pop('strategy', default_strategy)\n    386     strategy = strategies.strategies[strategy]\n--> 387     return strategy.create(*args, **kwargs)\n    388 \n    389 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/sqlalchemy/engine/strategies.py in create(self, name_or_url, **kwargs)\n     89 \n     90         # assemble connection arguments\n---> 91         (cargs, cparams) = dialect.create_connect_args(u)\n     92         cparams.update(pop_kwarg('connect_args', {}))\n     93         cargs = list(cargs)  # allow mutability\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/sqlalchemy/dialects/sqlite/pysqlite.py in create_connect_args(self, url)\n    357                 \" sqlite:///:memory: (or, sqlite://)\\n\"\n    358                 \" sqlite:///relative/path/to/file.db\\n\"\n--> 359                 \" sqlite:////absolute/path/to/file.db\" % (url,))\n    360         filename = url.database or ':memory:'\n    361         if filename != ':memory:':\n\nArgumentError: Invalid SQLite URL: sqlite://Users/baasman/.bokeh/data/movies.db\nValid SQLite URL forms are:\n sqlite:///:memory: (or, sqlite://)\n sqlite:///relative/path/to/file.db\n sqlite:////absolute/path/to/file.db\n\nIn [24]: engine = create_engine(''.join(['sqlite:///', movie_path]))\n\nIn [25]: engine\nOut[25]: Engine(sqlite:////Users/baasman/.bokeh/data/movies.db)\n\nIn [26]: engine.table_names()\nOut[26]: ['omdb', 'sqlite_stat1', 'tomatoes']\n\nIn [27]: conn = engine.connect()\n\nIn [28]: movies = conn.execute(query).fetchall()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-28-1ddfb8940cf2> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"6d6f76696573203d20636f6e6e2e65786563757465287175657279292e6665746368616c6c28290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'query' is not defined\n\nIn [29]: from query import query\n\nIn [30]: movies = conn.execute(query).fetchall()\n\nIn [31]: m = psql.read_sql(query, conn)\n\nIn [32]: m.head()\nOut[32]: \n     ID     imdbID                                             Title  Year  \\\n0  4972  tt0004972                             The Birth of a Nation  1915   \n1  6206  tt0006206                                      Les vampires  1915   \n2  6864  tt0006864  Intolerance: Love's Struggle Throughout the Ages  1916   \n3  9470  tt0009470                                      Over the Top  1918   \n4  9968  tt0009968    Broken Blossoms or The Yellow Man and the Girl  1919   \n\n  mpaaRating  Runtime                     Genre    Released         Director  \\\n0  Not Rated    165.0   Drama, History, Romance  1915-03-03    D.W. Griffith   \n1  Not Rated    399.0  Action, Adventure, Crime  1915-11-13  Louis Feuillade   \n2  Not Rated    197.0            Drama, History  1916-09-05    D.W. Griffith   \n3       None      0.0                Drama, War  1918-03-31    Wilfrid North   \n4  Not Rated     90.0            Drama, Romance  1919-10-20    D.W. Griffith   \n\n                                              Writer        ...          \\\n0  Thomas F. Dixon Jr. (adapted from his novel: \"...        ...           \n1                                    Louis Feuillade        ...           \n2      D.W. Griffith (scenario), Anita Loos (titles)        ...           \n3  Robert Gordon Anderson (scenario), Arthur Guy ...        ...           \n4  Thomas Burke (adapted from a story by), D.W. G...        ...           \n\n  numericRating  Meter  Reviews Fresh Rotten  userMeter  userRating  \\\n0           8.0    100       38    38      0       58.0         3.3   \n1           8.8    100       13    13      0       85.0         3.8   \n2           8.0     96       28    27      1       78.0         3.8   \n3           4.4     36       11     4      7       51.0         2.8   \n4           8.2     95       20    19      1       72.0         3.7   \n\n   userReviews  BoxOffice         Production  \n0       4034.0        NaN           Gravitas  \n1       2075.0        NaN               None  \n2       4604.0        NaN  Cohen Media Group  \n3      44707.0        NaN                     \n4       3651.0        NaN      Kino on Video  \n\n[5 rows x 26 columns]\n\nIn [33]: movies = psql.read_sql(query, conn)\n\nIn [34]: movies['color'] = np.where(movies['Oscars'] > 0, 'orange', 'grey')\n\nIn [35]: movies.head()\nOut[35]: \n     ID     imdbID                                             Title  Year  \\\n0  4972  tt0004972                             The Birth of a Nation  1915   \n1  6206  tt0006206                                      Les vampires  1915   \n2  6864  tt0006864  Intolerance: Love's Struggle Throughout the Ages  1916   \n3  9470  tt0009470                                      Over the Top  1918   \n4  9968  tt0009968    Broken Blossoms or The Yellow Man and the Girl  1919   \n\n  mpaaRating  Runtime                     Genre    Released         Director  \\\n0  Not Rated    165.0   Drama, History, Romance  1915-03-03    D.W. Griffith   \n1  Not Rated    399.0  Action, Adventure, Crime  1915-11-13  Louis Feuillade   \n2  Not Rated    197.0            Drama, History  1916-09-05    D.W. Griffith   \n3       None      0.0                Drama, War  1918-03-31    Wilfrid North   \n4  Not Rated     90.0            Drama, Romance  1919-10-20    D.W. Griffith   \n\n                                              Writer  ...   Meter  Reviews  \\\n0  Thomas F. Dixon Jr. (adapted from his novel: \"...  ...     100       38   \n1                                    Louis Feuillade  ...     100       13   \n2      D.W. Griffith (scenario), Anita Loos (titles)  ...      96       28   \n3  Robert Gordon Anderson (scenario), Arthur Guy ...  ...      36       11   \n4  Thomas Burke (adapted from a story by), D.W. G...  ...      95       20   \n\n   Fresh Rotten userMeter  userRating  userReviews  BoxOffice  \\\n0     38      0      58.0         3.3       4034.0        NaN   \n1     13      0      85.0         3.8       2075.0        NaN   \n2     27      1      78.0         3.8       4604.0        NaN   \n3      4      7      51.0         2.8      44707.0        NaN   \n4     19      1      72.0         3.7       3651.0        NaN   \n\n          Production  color  \n0           Gravitas   grey  \n1               None   grey  \n2  Cohen Media Group   grey  \n3                      grey  \n4      Kino on Video   grey  \n\n[5 rows x 27 columns]\n\nIn [36]: movies['color'] = np.where(movies['Oscars'] > 0, 'orange', 'grey')\n\nIn [37]: movies['alpha'] = np.where(movies['Oscars'] > 0, .9, .25)\n\nIn [38]: movies['alpha'] = np.where(movies['Oscars'] > 0, .9, .25)\n\nIn [39]: movies.fillna(0, inplace=True)\n\nIn [40]: '{:, d}'.format(int(3.43))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-40-d519a320a779> in <module>()\n----> 1 '{:, d}'.format(int(3.43))\n\nValueError: Invalid format specifier\n\nIn [41]: '{:, d}'.format(int(3))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-41-77d499a7cd71> in <module>()\n----> 1 '{:, d}'.format(int(3))\n\nValueError: Invalid format specifier\n\nIn [42]: '{:,d}'.format(int(3))\nOut[42]: '3'\n\nIn [43]: movies['revenue'] = movies.BoxOffice.apply(lambda x: '{:,d}'.format(int(x)))\n\nIn [44]: with open(join(dirname(__file__), 'razzies-clean.csv')) as f:\n    razzies = f.read().splitlines()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-44-4986ca36928c> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"77697468206f70656e286a6f696e286469726e616d65285f5f66696c655f5f292c202772617a7a6965732d636c65616e2e63737627292920617320663a0a2020202072617a7a696573203d20662e7265616428292e73706c69746c696e657328290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name '__file__' is not defined\n\nIn [45]: razzies = pd.read_csv('razzies-clean.csv')\n\nIn [46]: razzies\nOut[46]: \n    Unnamed: 0   TITLE_ID\n0            0  tt4009460\n1            1  tt1333125\n2            2  tt1673434\n3            3  tt0810913\n4            4  tt0938283\n5            5  tt1055369\n6            6  tt0811138\n7            7  tt0897361\n8            8  tt0430912\n9            9  tt0327643\n10          10  tt0327554\n11          11  tt0299930\n12          12  tt0291502\n13          13  tt0240515\n14          14  tt0185183\n15          15  tt0120891\n16          16  tt0118577\n17          17  tt0119925\n18          18  tt0117765\n19          19  tt0114436\n20          20  tt0109456\n21          21  tt0107211\n22          22  tt0105391\n23          23  tt0102070\n24          24  tt0098987\n25          25  tt0098382\n26          26  tt0094889\n27          27  tt0093405\n28          28  tt0091225\n29          29  tt0089880\n30          30  tt0086987\n31          31  tt0085863\n32          32  tt0084132\n33          33  tt0082766\n34          34  tt0080492\n\nIn [47]: razzies.columns\nOut[47]: Index(['Unnamed: 0', 'TITLE_ID'], dtype='object')\n\nIn [48]: razzies = pd.read_csv('razzies-clean.csv').TITLE_ID\n\nIn [49]: razzies\nOut[49]: \n0     tt4009460\n1     tt1333125\n2     tt1673434\n3     tt0810913\n4     tt0938283\n5     tt1055369\n6     tt0811138\n7     tt0897361\n8     tt0430912\n9     tt0327643\n10    tt0327554\n11    tt0299930\n12    tt0291502\n13    tt0240515\n14    tt0185183\n15    tt0120891\n16    tt0118577\n17    tt0119925\n18    tt0117765\n19    tt0114436\n20    tt0109456\n21    tt0107211\n22    tt0105391\n23    tt0102070\n24    tt0098987\n25    tt0098382\n26    tt0094889\n27    tt0093405\n28    tt0091225\n29    tt0089880\n30    tt0086987\n31    tt0085863\n32    tt0084132\n33    tt0082766\n34    tt0080492\nName: TITLE_ID, dtype: object\n\nIn [50]: movies.loc[movies.imdbID.isin(razzies), 'color'] = 'purple'\n\nIn [51]: movies.loc[movies.imdbID.isin(razzies), 'alpha'] = .9\n\nIn [52]: engine\nOut[52]: Engine(sqlite:////Users/baasman/.bokeh/data/movies.db)\n\nIn [53]: help(Div)\nHelp on class Div in module bokeh.models.widgets.markups:\n\nclass Div(Markup)\n |  A block (div) of text.\n |  \n |  Method resolution order:\n |      Div\n |      Markup\n |      bokeh.models.widgets.widget.Widget\n |      bokeh.models.layouts.LayoutDOM\n |      bokeh.model.Model\n |      bokeh.core.properties.HasProps\n |      bokeh.util.callback_manager.CallbackManager\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  get_class(view_model_name) from builtins.type\n |      Given a __view_model__ name, returns the corresponding class\n |      object\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  render_as_text\n |      Should the text be rendered as raw text (False, default), or should the text be interprited as an HTML string (True)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __container_props__ = set()\n |  \n |  __properties__ = {'render_as_text'}\n |  \n |  __properties_with_refs__ = set()\n |  \n |  __view_model__ = 'Div'\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from Markup:\n |  \n |  text\n |      The contents of the widget.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from Markup:\n |  \n |  __cached_all__properties__ = {'disabled', 'height', 'name', 'sizing_mo...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.models.layouts.LayoutDOM:\n |  \n |  __repr_html__(self)\n |      # TODO: (mp) Not yet, because it breaks plotting/notebook examples.\n |      # Rename to _repr_html_ if we decide to enable this by default.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.models.layouts.LayoutDOM:\n |  \n |  disabled\n |      Whether the widget will be disabled when rendered. If ``True``,\n |      the widget will be greyed-out, and not respond to UI events.\n |  \n |  height\n |      An optional height for the component (in pixels).\n |  \n |  html\n |  \n |  sizing_mode\n |      How the item being displayed should size itself. Possible values are\n |      ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n |      ``\"stretch_both\"``.\n |      \n |      ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n |      will resize to occupy all available space, even if this changes the aspect ratio of the element.\n |      This is sometimes called outside-in, and is a typical behavior for desktop applications.\n |      \n |      ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n |      regardless of any subsequent browser window resize events.\n |      \n |      ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n |      maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n |      ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n |      \n |      ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n |      maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n |      ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n |      to be wrapped in a ``Row`` or ``Column`` to be responsive.\n |      \n |      ``\"scale_both\"`` elements will responsively resize to fir both the width and height available,\n |      *while maintaining the original aspect ratio*.\n |  \n |  width\n |      An optional width for the component (in pixels).\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.model.Model:\n |  \n |  __init__(self, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  layout(self, side, plot)\n |  \n |  references(self)\n |      Returns all ``Models`` that this object has references to.\n |  \n |  select(self, selector)\n |      Query this object and all of its references for objects that\n |      match the given selector.\n |      \n |      Args:\n |          selector (JSON-like) :\n |      \n |      Returns:\n |          seq[Model]\n |  \n |  select_one(self, selector)\n |      Query this object and all of its references for objects that\n |      match the given selector.  Raises an error if more than one object\n |      is found.  Returns single matching object, or None if nothing is found\n |      Args:\n |          selector (JSON-like) :\n |      \n |      Returns:\n |          Model\n |  \n |  set_select(self, selector, updates)\n |      Update objects that match a given selector with the specified\n |      attribute/value updates.\n |      \n |      Args:\n |          selector (JSON-like) :\n |          updates (dict) :\n |      \n |      Returns:\n |          None\n |  \n |  to_json(self, include_defaults)\n |      Returns a dictionary of the attributes of this object,\n |      containing only \"JSON types\" (string, number, boolean,\n |      none, dict, list).\n |      \n |      References to other objects are serialized as \"refs\" (just\n |      the object ID and type info), so the deserializer will\n |      need to separately have the full attributes of those\n |      other objects.\n |      \n |      There's no corresponding from_json() because to\n |      deserialize an object is normally done in the context of a\n |      Document (since the Document can resolve references).\n |      \n |      For most purposes it's best to serialize and deserialize\n |      entire documents.\n |      \n |      Args:\n |          include_defaults (bool) : whether to include attributes\n |              that haven't been changed from the default\n |  \n |  to_json_string(self, include_defaults)\n |      Returns a JSON string encoding the attributes of this object.\n |      \n |      References to other objects are serialized as references\n |      (just the object ID and type info), so the deserializer\n |      will need to separately have the full attributes of those\n |      other objects.\n |      \n |      There's no corresponding from_json_string() because to\n |      deserialize an object is normally done in the context of a\n |      Document (since the Document can resolve references).\n |      \n |      For most purposes it's best to serialize and deserialize\n |      entire documents.\n |      \n |      Args:\n |          include_defaults (bool) : whether to include attributes\n |              that haven't been changed from the default\n |  \n |  trigger(self, attr, old, new, hint=None)\n |      Trigger callbacks for ``attr`` on this object.\n |      \n |      Args:\n |          attr (str) :\n |          old (object) :\n |          new (object) :\n |      \n |      Returns:\n |          None\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from bokeh.model.Model:\n |  \n |  collect_models(*input_values) from bokeh.model.Viewable\n |      Iterate over ``input_values`` and descend through their structure\n |      collecting all nested ``Models`` on the go. The resulting list\n |      is duplicate-free based on objects' identifiers.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.model.Model:\n |  \n |  document\n |  \n |  name\n |  \n |  ref\n |  \n |  tags\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.core.properties.HasProps:\n |  \n |  __setattr__(self, name, value)\n |      Implement setattr(self, name, value).\n |  \n |  apply_theme(self, property_values)\n |      Apply a set of theme values which will be used rather than\n |      defaults, but will not override application-set values.\n |      \n |      The passed-in dictionary may be kept around as-is and shared with\n |      other instances to save memory (so neither the caller nor the\n |      |HasProps| instance should modify it).\n |      \n |      .. |HasProps| replace:: :class:`~bokeh.properties.HasProps`\n |  \n |  pprint_props(self, indent=0)\n |      Prints the properties of this object, nicely formatted\n |  \n |  properties_with_values(self, include_defaults=True)\n |      Return a dict from property names to the current values of those\n |      properties.\n |      \n |      Non-serializable properties are skipped and property values are in\n |      \"serialized\" format which may be slightly different from the values\n |      you would normally read from the properties; the intent of this method\n |      is to return the information needed to losslessly reconstitute the\n |      object instance.\n |      \n |      Args:\n |          include_defaults (bool, optional) :\n |              Whether to include properties that haven't been set. (default: True)\n |      \n |      Returns:\n |         dict : mapping from property names to their values\n |  \n |  set(self, **kwargs)\n |      Sets a number of properties at once\n |  \n |  set_from_json(self, name, json, models=None)\n |      Sets a property of the object using JSON and a dictionary mapping\n |      model ids to model instances. The model instances are necessary if the\n |      JSON contains references to models.\n |  \n |  themed_values(self)\n |      Get any theme-provided overrides as a dict from property name\n |      to value, or None if no theme overrides any values for this instance.\n |  \n |  unapply_theme(self)\n |  \n |  update(self, **kwargs)\n |      Updates the object's properties from the given keyword args.\n |  \n |  update_from_json(self, json_attributes, models=None)\n |      Updates the object's properties from a JSON attributes dictionary.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from bokeh.core.properties.HasProps:\n |  \n |  dataspecs() from bokeh.model.Viewable\n |      Returns a set of the names of this object's dataspecs (and\n |      dataspec subclasses).  Traverses the class hierarchy.\n |  \n |  dataspecs_with_props() from bokeh.model.Viewable\n |      Returns a dict of dataspec names to dataspec properties.\n |  \n |  lookup(name) from bokeh.model.Viewable\n |  \n |  properties(with_bases=True) from bokeh.model.Viewable\n |      Return a set of the names of this object's properties. If\n |      ``with_bases`` is True, we traverse the class hierarchy\n |      and pull together the full list of properties; if False,\n |      we only return the properties introduced in the class\n |      itself.\n |      \n |      Args:\n |         with_bases (bool, optional) :\n |          Whether to include properties that haven't been set. (default: True)\n |      \n |      Returns:\n |         a set of property names\n |  \n |  properties_containers() from bokeh.model.Viewable\n |      Returns a list of properties that are containers.\n |  \n |  properties_with_refs() from bokeh.model.Viewable\n |      Return a set of the names of this object's properties that\n |      have references. We traverse the class hierarchy and\n |      pull together the full list of properties.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.core.properties.HasProps:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.util.callback_manager.CallbackManager:\n |  \n |  on_change(self, attr, *callbacks)\n |      Add a callback on this object to trigger when ``attr`` changes.\n |      \n |      Args:\n |          attr (str) : an attribute name on this object\n |          callback (callable) : a callback function to register\n |      \n |      Returns:\n |          None\n |  \n |  remove_on_change(self, attr, *callbacks)\n |      Remove a callback from this object\n\n\nIn [54]: desc = Div(description, width=800)\n\nNameErrorTraceback (most recent call last)\n<ipython-input-54-29e26bffbe0b> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64657363203d20446976286465736372697074696f6e2c2077696474683d383030290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'description' is not defined\n\nIn [55]: from description import description\n\nIn [56]: desc = Div(description, width=800)\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-56-29e26bffbe0b> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64657363203d20446976286465736372697074696f6e2c2077696474683d383030290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: __init__() takes 1 positional argument but 2 were given\n\nIn [57]: desc = Div(description)\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-57-ca40e446b415> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"64657363203d20446976286465736372697074696f6e290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: __init__() takes 1 positional argument but 2 were given\n\nIn [58]: genres = ['All',\n          'Action',\n          'Adventure',\n          'Animation',\n          'Biography',\n          'Comedy',\n          'Crime',\n          'Documentary',\n          'Drama',\n          'Family',\n          'Fantasy',\n          'History',\n          'Horror',\n          'Music',\n          'Musical',\n          'Mystery',\n          'Romance',\n          'Sci-Fi',\n          'Short',\n          'Sport',\n          'Thriller',\n          'War',\n          'Western']\n\nIn [59]: genres\nOut[59]: \n['All',\n 'Action',\n 'Adventure',\n 'Animation',\n 'Biography',\n 'Comedy',\n 'Crime',\n 'Documentary',\n 'Drama',\n 'Family',\n 'Fantasy',\n 'History',\n 'Horror',\n 'Music',\n 'Musical',\n 'Mystery',\n 'Romance',\n 'Sci-Fi',\n 'Short',\n 'Sport',\n 'Thriller',\n 'War',\n 'Western']\n\nIn [60]: \naxis_map = {\n    \"Tomato Meter\": \"Meter\",\n    \"Numeric Rating\": \"numericRating\",\n    \"Number of Reviews\": \"Reviews\",\n    \"Box Office (dollars)\": \"BoxOffice\",\n    \"Length (minutes)\": \"Runtime\",\n    \"Year\": \"Year\",\n}\n\nIn [61]: sorted(axis_map.keys())\nOut[61]: \n['Box Office (dollars)',\n 'Length (minutes)',\n 'Number of Reviews',\n 'Numeric Rating',\n 'Tomato Meter',\n 'Year']\n\nIn [62]: p = figure(plot_height=600, plot_width=700, title='', toolbar_location=None,\n           tools=[hover])\n\nNameErrorTraceback (most recent call last)\n<ipython-input-62-1063f041fa28> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"70203d2066696775726528706c6f745f6865696768743d3630302c20706c6f745f77696474683d3730302c207469746c653d27272c20746f6f6c6261725f6c6f636174696f6e3d4e6f6e652c0a2020202020202020202020746f6f6c733d5b686f7665725d290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'hover' is not defined\n\nIn [63]: hover = HoverTool(tooltips=[\n    ('Title', '@title'),\n    ('Year', '@year'),\n    ('$', '@revenue')])\n\np = figure(plot_height=600, plot_width=700, title='', toolbar_location=None,\n           tools=[hover])\n\nIn [64]: help(p.circle)\nHelp on method Circle in module bokeh.plotting.helpers:\n\nCircle(*args, **kwargs) method of bokeh.plotting.figure.Figure instance\n    Configure and add Circle glyphs to this Figure.\n    \n    Args:\n        x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)\n        y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)\n    \n    Keyword Args:\n        angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)\n        angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')\n        fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)\n        fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')\n        line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)\n        line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')\n        line_color (DataSpecProperty) : The line color values for the markers. (default 'black')\n        line_dash (BasicProperty) : The line dash values for the markers. (default [])\n        line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)\n        line_join (BasicProperty) : The line join values for the markers. (default 'miter')\n        line_width (DataSpecProperty) : The line width values for the markers. (default 1)\n        name (name:String) :  (default None)\n        radius (UnitsSpecProperty) : The radius values for circle markers (in \"data space\" units, by default). (default None)\n        radius_dimension (BasicProperty) : What dimension to measure circle radii along. (default 'x')\n        radius_units (radius_units:Enum('screen', 'data')) :  (default 'data')\n        size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)\n        tags (tags:List(Any)) :  (default [])\n        visible (BasicProperty) : Whether the glyph should render or not. (default True)\n    \n    Other Parameters:\n        alpha (float) : an alias to set all alpha keyword args at once\n        color (Color) : an alias to set all color keyword args at once\n        source (ColumnDataSource) : a user supplied data source\n        legend (str) : a legend tag for this glyph\n        x_range_name (str) : name an extra range to use for mapping x-coordinates\n        y_range_name (str) : name an extra range to use for mapping y-coordinates\n        level (Enum) : control the render level order for this glyph\n    \n    It is also possible to set the color and alpha parameters of a \"nonselection\"\n    glyph. To do so, prefix any visual parameter with ``'nonselection_'``.\n    For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.\n    \n    Returns:\n        GlyphRenderer\n    \n    .. note::\n        Only one of ``size`` or ``radius`` should be provided. Note that ``radius``\n        defaults to data units.\n    \n    Examples:\n    \n        .. bokeh-plot::\n            :source-position: above\n    \n            from bokeh.plotting import figure, output_file, show\n    \n            plot = figure(width=300, height=300)\n            plot.circle(x=[1, 2, 3], y=[1, 2, 3], size=20)\n    \n            show(plot)\n\n\nIn [65]: genre\n\nNameErrorTraceback (most recent call last)\n<ipython-input-65-2bd10b508c66> in <module>()\n----> 1 genre\n\nNameError: name 'genre' is not defined\n\nIn [66]: reviews = Slider(title=\"Minimum number of reviews\",\n                 value=80, start=10, end=300, step=10)\nmin_year = Slider(title=\"Year released\", start=1940,\n                  end=2014, value=1970, step=1)\nmax_year = Slider(title=\"End Year released\", start=1940,\n                  end=2014, value=2014, step=1)\noscars = Slider(title=\"Minimum number of Oscar wins\",\n                start=0, end=4, value=0, step=1)\nboxoffice = Slider(title=\"Dollars at Box Office (millions)\",\n                   start=0, end=800, value=0, step=1)\n\ngenre = Select(title='Genre', value='All',\n               options=genres)\n\ndirector = TextInput(title=\"Director name contains\")\ncast = TextInput(title=\"Cast names contains\")\nx_axis = Select(title=\"X Axis\", options=sorted(\n    axis_map.keys()), value=\"Tomato Meter\")\ny_axis = Select(title=\"Y Axis\", options=sorted(\n    axis_map.keys()), value=\"Number of Reviews\")\n\nIn [67]: genre\nOut[67]: <bokeh.models.widgets.inputs.Select at 0x119e63c18>\n\nIn [68]: controls = [reviews, boxoffice, genre, min_year, max_year, oscars, director, cast, x_axis, y_axis]\n\nIn [69]: help(curdoc)\nHelp on function curdoc in module bokeh.io:\n\ncurdoc()\n    Return the document for the current default state.\n    \n    Returns:\n        doc : the current default document object.\n\n\nIn [70]: frmo bokeh.io import show\n  File \"<string>\", line 1\n    frmo bokeh.io import show\n             ^\nSyntaxError: invalid syntax\n\n\nIn [71]: from bokeh.plotting import figure, show\n\nIn [72]: from nba_py.player import PlayerList\n\nIn [73]: pl = PlayerList()\n\nIn [74]: len(pi)\n\nNameErrorTraceback (most recent call last)\n<ipython-input-74-a6f610b023f5> in <module>()\n----> 1 len(pi)\n\nNameError: name 'pi' is not defined\n\nIn [75]: len(pl)\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-75-590172748c0f> in <module>()\n----> 1 len(pl)\n\nTypeError: object of type 'PlayerList' has no len()\n\nIn [76]: l = pl.info()\n\nIn [77]: type(l)\nOut[77]: pandas.core.frame.DataFrame\n\nIn [78]: l\nOut[78]: \n     PERSON_ID DISPLAY_LAST_COMMA_FIRST     DISPLAY_FIRST_LAST  ROSTERSTATUS  \\\n0       203518            Abrines, Alex           Alex Abrines             1   \n1       203112              Acy, Quincy             Quincy Acy             0   \n2       203500            Adams, Steven           Steven Adams             1   \n3       201167           Afflalo, Arron          Arron Afflalo             1   \n4       201582           Ajinca, Alexis          Alexis Ajinca             1   \n5       202332            Aldrich, Cole           Cole Aldrich             1   \n6       200746       Aldridge, LaMarcus      LaMarcus Aldridge             1   \n7       202730             Allen, Lavoy            Lavoy Allen             1   \n8         2754              Allen, Tony             Tony Allen             1   \n9       202329         Aminu, Al-Farouq        Al-Farouq Aminu             1   \n10        2365          Andersen, Chris         Chris Andersen             1   \n11      101187           Anderson, Alan          Alan Anderson             1   \n12     1626147         Anderson, Justin        Justin Anderson             1   \n13      203937           Anderson, Kyle          Kyle Anderson             1   \n14      201583           Anderson, Ryan          Ryan Anderson             1   \n15      203507   Antetokounmpo, Giannis  Giannis Antetokounmpo             1   \n16        2546         Anthony, Carmelo        Carmelo Anthony             1   \n17        2772            Ariza, Trevor           Trevor Ariza             1   \n18      201589          Arthur, Darrell         Darrell Arthur             1   \n19      201600               Asik, Omer              Omer Asik             1   \n20      201571           Augustin, D.J.          D.J. Augustin             1   \n21      202337            Babbitt, Luke           Luke Babbitt             1   \n22     1627758               Baker, Ron              Ron Baker             1   \n23     1627735         Baldwin IV, Wade        Wade Baldwin IV             1   \n24        2571         Barbosa, Leandro        Leandro Barbosa             1   \n25      200826              Barea, J.J.             J.J. Barea             1   \n26      203084         Barnes, Harrison        Harrison Barnes             1   \n27        2440             Barnes, Matt            Matt Barnes             1   \n28      203115             Barton, Will            Will Barton             1   \n29      101138            Bass, Brandon           Brandon Bass             1   \n..         ...                      ...                    ...           ...   \n432       2561              West, David             David West             1   \n433     201566       Westbrook, Russell      Russell Westbrook             1   \n434    1627785        Whitehead, Isaiah       Isaiah Whitehead             1   \n435     202355        Whiteside, Hassan       Hassan Whiteside             1   \n436     203952          Wiggins, Andrew         Andrew Wiggins             1   \n437     203912               Wilcox, CJ              CJ Wilcox             1   \n438    1626210           Williams, Alan          Alan Williams             1   \n439     101114          Williams, Deron         Deron Williams             1   \n440     202682        Williams, Derrick       Derrick Williams             1   \n441     101150            Williams, Lou           Lou Williams             1   \n442     101107         Williams, Marvin        Marvin Williams             1   \n443       2590             Williams, Mo            Mo Williams             1   \n444     202130         Williams, Reggie        Reggie Williams             0   \n445    1627786           Williams, Troy          Troy Williams             1   \n446    1627787            Wiltjer, Kyle           Kyle Wiltjer             1   \n447    1626159         Winslow, Justise        Justise Winslow             1   \n448     203481             Withey, Jeff            Jeff Withey             1   \n449    1626174          Wood, Christian         Christian Wood             1   \n450       1897       World Peace, Metta      Metta World Peace             1   \n451     201148          Wright, Brandan         Brandan Wright             1   \n452    1626153            Wright, Delon           Delon Wright             1   \n453     203923             Young, James            James Young             1   \n454    1626202               Young, Joe              Joe Young             1   \n455     201156              Young, Nick             Nick Young             1   \n456     201152          Young, Thaddeus         Thaddeus Young             1   \n457     203469             Zeller, Cody            Cody Zeller             1   \n458     203092            Zeller, Tyler           Tyler Zeller             1   \n459    1627757       Zimmerman, Stephen      Stephen Zimmerman             1   \n460    1627835             Zipser, Paul            Paul Zipser             1   \n461    1627826             Zubac, Ivica            Ivica Zubac             1   \n\n    FROM_YEAR TO_YEAR             PLAYERCODE     TEAM_ID      TEAM_CITY  \\\n0        2016    2016           alex_abrines  1610612760  Oklahoma City   \n1        2012    2016             quincy_acy           0                  \n2        2013    2016           steven_adams  1610612760  Oklahoma City   \n3        2007    2016          arron_afflalo  1610612758     Sacramento   \n4        2008    2016          alexis_ajinca  1610612740    New Orleans   \n5        2010    2016           cole_aldrich  1610612750      Minnesota   \n6        2006    2016      lamarcus_aldridge  1610612759    San Antonio   \n7        2011    2016            lavoy_allen  1610612754        Indiana   \n8        2004    2016             tony_allen  1610612763        Memphis   \n9        2010    2016        al-farouq_aminu  1610612757       Portland   \n10       2001    2016         chris_andersen  1610612739      Cleveland   \n11       2005    2016          alan_anderson  1610612746             LA   \n12       2015    2016        justin_anderson  1610612742         Dallas   \n13       2014    2016          kyle_anderson  1610612759    San Antonio   \n14       2008    2016        ryan_j_anderson  1610612745        Houston   \n15       2013    2016  giannis_antetokounmpo  1610612749      Milwaukee   \n16       2003    2016        carmelo_anthony  1610612752       New York   \n17       2004    2016           trevor_ariza  1610612745        Houston   \n18       2008    2016         darrell_arthur  1610612743         Denver   \n19       2010    2016              omer_asik  1610612740    New Orleans   \n20       2008    2016            dj_augustin  1610612753        Orlando   \n21       2010    2016           luke_babbitt  1610612748          Miami   \n22       2016    2016              ron_baker  1610612752       New York   \n23       2016    2016        wade_baldwin iv  1610612763        Memphis   \n24       2003    2016        leandro_barbosa  1610612756        Phoenix   \n25       2006    2016             j.j._barea  1610612742         Dallas   \n26       2012    2016        harrison_barnes  1610612742         Dallas   \n27       2002    2016            matt_barnes  1610612758     Sacramento   \n28       2012    2016            will_barton  1610612743         Denver   \n29       2005    2016           brandon_bass  1610612746             LA   \n..        ...     ...                    ...         ...            ...   \n432      2003    2016             david_west  1610612744   Golden State   \n433      2008    2016      russell_westbrook  1610612760  Oklahoma City   \n434      2016    2016       isaiah_whitehead  1610612751       Brooklyn   \n435      2010    2016       hassan_whiteside  1610612748          Miami   \n436      2014    2016         andrew_wiggins  1610612750      Minnesota   \n437      2014    2016              cj_wilcox  1610612753        Orlando   \n438      2015    2016          alan_williams  1610612756        Phoenix   \n439      2005    2016         deron_williams  1610612742         Dallas   \n440      2011    2016       derrick_williams  1610612748          Miami   \n441      2005    2016         louis_williams  1610612747    Los Angeles   \n442      2005    2016        marvin_williams  1610612766      Charlotte   \n443      2003    2016            Mo_Williams  1610612737        Atlanta   \n444      2009    2016        reggie_williams           0                  \n445      2016    2016          troy_williams  1610612763        Memphis   \n446      2016    2016           kyle_wiltjer  1610612745        Houston   \n447      2015    2016        justise_winslow  1610612748          Miami   \n448      2013    2016            jeff_withey  1610612762           Utah   \n449      2015    2016         christian_wood  1610612766      Charlotte   \n450      1999    2016      metta_world peace  1610612747    Los Angeles   \n451      2007    2016         brandan_wright  1610612763        Memphis   \n452      2015    2016           delon_wright  1610612761        Toronto   \n453      2014    2016            james_young  1610612738         Boston   \n454      2015    2016              joe_young  1610612754        Indiana   \n455      2007    2016             nick_young  1610612747    Los Angeles   \n456      2007    2016         thaddeus_young  1610612754        Indiana   \n457      2013    2016            cody_zeller  1610612766      Charlotte   \n458      2012    2016           tyler_zeller  1610612738         Boston   \n459      2016    2016      stephen_zimmerman  1610612753        Orlando   \n460      2016    2016            paul_zipser  1610612741        Chicago   \n461      2016    2016            ivica_zubac  1610612747    Los Angeles   \n\n         TEAM_NAME TEAM_ABBREVIATION     TEAM_CODE GAMES_PLAYED_FLAG  \n0          Thunder               OKC       thunder                 Y  \n1                                                                  Y  \n2          Thunder               OKC       thunder                 Y  \n3            Kings               SAC         kings                 Y  \n4         Pelicans               NOP      pelicans                 Y  \n5     Timberwolves               MIN  timberwolves                 Y  \n6            Spurs               SAS         spurs                 Y  \n7           Pacers               IND        pacers                 Y  \n8        Grizzlies               MEM     grizzlies                 Y  \n9    Trail Blazers               POR       blazers                 Y  \n10       Cavaliers               CLE     cavaliers                 Y  \n11        Clippers               LAC      clippers                 Y  \n12       Mavericks               DAL     mavericks                 Y  \n13           Spurs               SAS         spurs                 Y  \n14         Rockets               HOU       rockets                 Y  \n15           Bucks               MIL         bucks                 Y  \n16          Knicks               NYK        knicks                 Y  \n17         Rockets               HOU       rockets                 Y  \n18         Nuggets               DEN       nuggets                 Y  \n19        Pelicans               NOP      pelicans                 Y  \n20           Magic               ORL         magic                 Y  \n21            Heat               MIA          heat                 Y  \n22          Knicks               NYK        knicks                 Y  \n23       Grizzlies               MEM     grizzlies                 Y  \n24            Suns               PHX          suns                 Y  \n25       Mavericks               DAL     mavericks                 Y  \n26       Mavericks               DAL     mavericks                 Y  \n27           Kings               SAC         kings                 Y  \n28         Nuggets               DEN       nuggets                 Y  \n29        Clippers               LAC      clippers                 Y  \n..             ...               ...           ...               ...  \n432       Warriors               GSW      warriors                 Y  \n433        Thunder               OKC       thunder                 Y  \n434           Nets               BKN          nets                 Y  \n435           Heat               MIA          heat                 Y  \n436   Timberwolves               MIN  timberwolves                 Y  \n437          Magic               ORL         magic                 Y  \n438           Suns               PHX          suns                 Y  \n439      Mavericks               DAL     mavericks                 Y  \n440           Heat               MIA          heat                 Y  \n441         Lakers               LAL        lakers                 Y  \n442        Hornets               CHA       hornets                 Y  \n443          Hawks               ATL         hawks                 Y  \n444                                                                Y  \n445      Grizzlies               MEM     grizzlies                 Y  \n446        Rockets               HOU       rockets                 Y  \n447           Heat               MIA          heat                 Y  \n448           Jazz               UTA          jazz                 Y  \n449        Hornets               CHA       hornets                 Y  \n450         Lakers               LAL        lakers                 Y  \n451      Grizzlies               MEM     grizzlies                 Y  \n452        Raptors               TOR       raptors                 Y  \n453        Celtics               BOS       celtics                 Y  \n454         Pacers               IND        pacers                 Y  \n455         Lakers               LAL        lakers                 Y  \n456         Pacers               IND        pacers                 Y  \n457        Hornets               CHA       hornets                 Y  \n458        Celtics               BOS       celtics                 Y  \n459          Magic               ORL         magic                 Y  \n460          Bulls               CHI         bulls                 Y  \n461         Lakers               LAL        lakers                 Y  \n\n[462 rows x 13 columns]\n\nIn [79]: df = pl.info()\n\nIn [80]: teams = df.TEAM_ABBREVIATION.unique\n\nIn [81]: teams\nOut[81]: \n<bound method IndexOpsMixin.unique of 0      OKC\n1         \n2      OKC\n3      SAC\n4      NOP\n5      MIN\n6      SAS\n7      IND\n8      MEM\n9      POR\n10     CLE\n11     LAC\n12     DAL\n13     SAS\n14     HOU\n15     MIL\n16     NYK\n17     HOU\n18     DEN\n19     NOP\n20     ORL\n21     MIA\n22     NYK\n23     MEM\n24     PHX\n25     DAL\n26     DAL\n27     SAC\n28     DEN\n29     LAC\n      ... \n432    GSW\n433    OKC\n434    BKN\n435    MIA\n436    MIN\n437    ORL\n438    PHX\n439    DAL\n440    MIA\n441    LAL\n442    CHA\n443    ATL\n444       \n445    MEM\n446    HOU\n447    MIA\n448    UTA\n449    CHA\n450    LAL\n451    MEM\n452    TOR\n453    BOS\n454    IND\n455    LAL\n456    IND\n457    CHA\n458    BOS\n459    ORL\n460    CHI\n461    LAL\nName: TEAM_ABBREVIATION, dtype: object>\n\nIn [81]: teams = df.TEAM_ABBREVIATION.unique()\n\nIn [83]: teams\nOut[83]: \narray(['OKC', '', 'SAC', 'NOP', 'MIN', 'SAS', 'IND', 'MEM', 'POR', 'CLE',\n       'LAC', 'DAL', 'HOU', 'MIL', 'NYK', 'DEN', 'ORL', 'MIA', 'PHX',\n       'CHA', 'PHI', 'DET', 'ATL', 'WAS', 'BKN', 'LAL', 'UTA', 'BOS',\n       'CHI', 'TOR', 'GSW'], dtype=object)\n\nIn [84]: from nba_py.game import BoxscoreSummary\n\nIn [85]: players = df.PLAYERCODE.unique()\n\nIn [86]: len(players)\nOut[86]: 462\n\nIn [87]: players.shape[0]\nOut[87]: 462\n\nIn [88]: players.shape\nOut[88]: (462,)\n\nIn [89]: bs = BoxscoreSummary()\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-89-6b3dd21a7cae> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"6273203d20426f7873636f726553756d6d61727928290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: __init__() missing 1 required positional argument: 'game_id'\n\nIn [90]: bs = BoxscoreSummary(game_id=1)\n\nHTTPErrorTraceback (most recent call last)\n<ipython-input-90-c56ee9d38db6> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"6273203d20426f7873636f726553756d6d6172792867616d655f69643d31290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/nba_py/game.py in __init__(self, game_id, season, season_type, range_type, start_period, end_period, start_range, end_range)\n     23                                       'EndPeriod': end_period,\n     24                                       'StartRange': start_range,\n---> 25                                       'EndRange': end_range})\n     26 \n     27     def game_summary(self):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/nba_py/__init__.py in _get_json(endpoint, params, referer)\n     83                headers=h)\n     84     # print _get.url\n---> 85     _get.raise_for_status()\n     86     return _get.json()\n     87 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/requests/models.py in raise_for_status(self)\n    842 \n    843         if http_error_msg:\n--> 844             raise HTTPError(http_error_msg, response=self)\n    845 \n    846     def close(self):\n\nHTTPError: 400 Client Error: Bad Request for url: http://stats.nba.com/stats/boxscoresummaryv2?Season=2016-17&GameID=1&SeasonType=Regular+Season&EndPeriod=0&StartPeriod=0&EndRange=0&StartRange=0&RangeType=0\n\nIn [91]: import nba_py\n\nIn [92]: sb = Scoreboard()\n\nNameErrorTraceback (most recent call last)\n<ipython-input-92-0995ad6c26e8> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"7362203d2053636f7265626f61726428290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'Scoreboard' is not defined\n\nIn [93]: sb = nba_py.Scoreboard()\n\nIn [94]: sb\nOut[94]: <nba_py.Scoreboard at 0x119d60be0>\n\nIn [95]: dir(sb)\nOut[95]: \n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_endpoint',\n '_game_date',\n 'available',\n 'east_conf_standings_by_day',\n 'game_header',\n 'json',\n 'last_meeting',\n 'line_score',\n 'series_standings',\n 'west_conf_standings_by_day']\n\nIn [96]: sb.west_conf_standings_by_day\nOut[96]: <bound method Scoreboard.west_conf_standings_by_day of <nba_py.Scoreboard object at 0x119d60be0>>\n\nIn [97]: sb.west_conf_standings_by_day()\nOut[97]: \n       TEAM_ID LEAGUE_ID SEASON_ID STANDINGSDATE CONFERENCE           TEAM  \\\n0   1610612744        00     22016    01/07/2017       West   Golden State   \n1   1610612759        00     22016    01/07/2017       West    San Antonio   \n2   1610612745        00     22016    01/07/2017       West        Houston   \n3   1610612746        00     22016    01/07/2017       West    LA Clippers   \n4   1610612762        00     22016    01/07/2017       West           Utah   \n5   1610612763        00     22016    01/07/2017       West        Memphis   \n6   1610612760        00     22016    01/07/2017       West  Oklahoma City   \n7   1610612757        00     22016    01/07/2017       West       Portland   \n8   1610612758        00     22016    01/07/2017       West     Sacramento   \n9   1610612743        00     22016    01/07/2017       West         Denver   \n10  1610612740        00     22016    01/07/2017       West    New Orleans   \n11  1610612747        00     22016    01/07/2017       West    L.A. Lakers   \n12  1610612756        00     22016    01/07/2017       West        Phoenix   \n13  1610612742        00     22016    01/07/2017       West         Dallas   \n14  1610612750        00     22016    01/07/2017       West      Minnesota   \n\n     G   W   L  W_PCT HOME_RECORD ROAD_RECORD  \n0   37  31   6  0.838        16-3        15-3  \n1   36  29   7  0.806        12-4        17-3  \n2   38  29   9  0.763        15-3        14-6  \n3   39  25  14  0.641        13-6        12-8  \n4   37  22  15  0.595        12-7        10-8  \n5   39  23  16  0.590        13-7        10-9  \n6   37  21  16  0.568        13-6        8-10  \n7   38  16  22  0.421        10-7        6-15  \n8   36  15  21  0.417         7-9        8-12  \n9   36  14  22  0.389        7-11        7-11  \n10  38  14  24  0.368       10-11        4-13  \n11  40  14  26  0.350        9-10        5-16  \n12  37  12  25  0.324         7-9        5-16  \n13  36  11  25  0.306        7-10        4-15  \n14  36  11  25  0.306        6-12        5-13  \n\nIn [98]: from nba_py.team import _TeamDashboard\n\nIn [99]: from nba_py.team import _TeamDashboard, TeamGameLogs\n\nIn [100]: log = TeamGameLogs()\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-100-90e41acfe1bd> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"6c6f67203d205465616d47616d654c6f677328290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nTypeError: __init__() missing 1 required positional argument: 'team_id'\n\nIn [101]: from nba_py.team import _TeamDashboard, TeamGameLogs, TeamList\n\nIn [102]: list = TeamList()\n\nIn [103]: list = TeamList().info()\n\nIn [104]: list\nOut[104]: \n   LEAGUE_ID     TEAM_ID MIN_YEAR MAX_YEAR ABBREVIATION\n0         00  1610612737     1949     2016          ATL\n1         00  1610612738     1946     2016          BOS\n2         00  1610612739     1970     2016          CLE\n3         00  1610612740     2002     2016          NOP\n4         00  1610612741     1966     2016          CHI\n5         00  1610612742     1980     2016          DAL\n6         00  1610612743     1976     2016          DEN\n7         00  1610612744     1946     2016          GSW\n8         00  1610612745     1967     2016          HOU\n9         00  1610612747     1948     2016          LAL\n10        00  1610612748     1988     2016          MIA\n11        00  1610612749     1968     2016          MIL\n12        00  1610612750     1989     2016          MIN\n13        00  1610612751     1976     2016          BKN\n14        00  1610612752     1946     2016          NYK\n15        00  1610612753     1989     2016          ORL\n16        00  1610612754     1976     2016          IND\n17        00  1610612755     1949     2016          PHI\n18        00  1610612756     1968     2016          PHX\n19        00  1610612757     1970     2016          POR\n20        00  1610612759     1976     2016          SAS\n21        00  1610612760     1967     2016          OKC\n22        00  1610612761     1995     2016          TOR\n23        00  1610612762     1974     2016          UTA\n24        00  1610612763     1995     2016          MEM\n25        00  1610612764     1961     2016          WAS\n26        00  1610612765     1948     2016          DET\n27        00  1610612766     1988     2016          CHA\n28        00  1610612746     1970     2016          LAC\n29        00  1610612758     1948     2016          SAC\n30        00  1610610024     1947     1954         None\n31        00  1610610023     1949     1949         None\n32        00  1610610029     1948     1948         None\n33        00  1610610025     1946     1949         None\n34        00  1610610031     1946     1946         None\n35        00  1610610034     1946     1949         None\n36        00  1610610036     1946     1950         None\n37        00  1610610027     1949     1949         None\n38        00  1610610030     1949     1952         None\n39        00  1610610033     1949     1949         None\n40        00  1610610037     1949     1949         None\n41        00  1610610026     1946     1946         None\n42        00  1610610028     1946     1946         None\n43        00  1610610032     1946     1948         None\n44        00  1610610035     1946     1946         None\n\nIn [105]: l = TeamList().info()\n\nIn [106]: current = l.TEAM_ABBREVIATION != None\n\nAttributeErrorTraceback (most recent call last)\n<ipython-input-106-52d6bb2a7bc9> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"63757272656e74203d206c2e5445414d5f414242524556494154494f4e20213d204e6f6e650a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/pandas/core/generic.py in __getattr__(self, name)\n   2670             if name in self._info_axis:\n   2671                 return self[name]\n-> 2672             return object.__getattribute__(self, name)\n   2673 \n   2674     def __setattr__(self, name, value):\n\nAttributeError: 'DataFrame' object has no attribute 'TEAM_ABBREVIATION'\n\nIn [107]: l.columns\nOut[107]: Index(['LEAGUE_ID', 'TEAM_ID', 'MIN_YEAR', 'MAX_YEAR', 'ABBREVIATION'], dtype='object')\n\nIn [108]: current = l.ABBREVIATION != None\n\nIn [109]: current\nOut[109]: \n0     True\n1     True\n2     True\n3     True\n4     True\n5     True\n6     True\n7     True\n8     True\n9     True\n10    True\n11    True\n12    True\n13    True\n14    True\n15    True\n16    True\n17    True\n18    True\n19    True\n20    True\n21    True\n22    True\n23    True\n24    True\n25    True\n26    True\n27    True\n28    True\n29    True\n30    True\n31    True\n32    True\n33    True\n34    True\n35    True\n36    True\n37    True\n38    True\n39    True\n40    True\n41    True\n42    True\n43    True\n44    True\nName: ABBREVIATION, dtype: bool\n\nIn [110]: l.iloc[40]\nOut[110]: \nLEAGUE_ID               00\nTEAM_ID         1610610037\nMIN_YEAR              1949\nMAX_YEAR              1949\nABBREVIATION          None\nName: 40, dtype: object\n\nIn [111]: current = l.ABBREVIATION is not None\n\nIn [112]: current\nOut[112]: True\n\nIn [113]: l.ABBREVIATION\nOut[113]: \n0      ATL\n1      BOS\n2      CLE\n3      NOP\n4      CHI\n5      DAL\n6      DEN\n7      GSW\n8      HOU\n9      LAL\n10     MIA\n11     MIL\n12     MIN\n13     BKN\n14     NYK\n15     ORL\n16     IND\n17     PHI\n18     PHX\n19     POR\n20     SAS\n21     OKC\n22     TOR\n23     UTA\n24     MEM\n25     WAS\n26     DET\n27     CHA\n28     LAC\n29     SAC\n30    None\n31    None\n32    None\n33    None\n34    None\n35    None\n36    None\n37    None\n38    None\n39    None\n40    None\n41    None\n42    None\n43    None\n44    None\nName: ABBREVIATION, dtype: object\n\nIn [114]: l.ABBREVIATION[40] == None\nOut[114]: True\n\nIn [115]: import numpy\n\nIn [116]: numpy.where(l.ABBREVIATION != None)\nOut[116]: \n(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]),)\n\nIn [117]: type(l.ABBREVIATION[1])\nOut[117]: str\n\nIn [118]: type(l.ABBREVIATION[40])\nOut[118]: NoneType\n\nIn [119]: tl = TeamList().info()\n\nIn [120]: teams = l.ABBREVIATION[:30]\n\nIn [121]: teams\nOut[121]: \n0     ATL\n1     BOS\n2     CLE\n3     NOP\n4     CHI\n5     DAL\n6     DEN\n7     GSW\n8     HOU\n9     LAL\n10    MIA\n11    MIL\n12    MIN\n13    BKN\n14    NYK\n15    ORL\n16    IND\n17    PHI\n18    PHX\n19    POR\n20    SAS\n21    OKC\n22    TOR\n23    UTA\n24    MEM\n25    WAS\n26    DET\n27    CHA\n28    LAC\n29    SAC\nName: ABBREVIATION, dtype: object\n\nIn [122]: teams = l.ABBREVIATION[:30].values\n\nIn [123]: teams\nOut[123]: \narray(['ATL', 'BOS', 'CLE', 'NOP', 'CHI', 'DAL', 'DEN', 'GSW', 'HOU',\n       'LAL', 'MIA', 'MIL', 'MIN', 'BKN', 'NYK', 'ORL', 'IND', 'PHI',\n       'PHX', 'POR', 'SAS', 'OKC', 'TOR', 'UTA', 'MEM', 'WAS', 'DET',\n       'CHA', 'LAC', 'SAC'], dtype=object)\n\nIn [124]: tl.columns\nOut[124]: Index(['LEAGUE_ID', 'TEAM_ID', 'MIN_YEAR', 'MAX_YEAR', 'ABBREVIATION'], dtype='object')\n\nIn [125]: codes = l.LEAGUE_ID[:30].values\n\nIn [126]: codes\nOut[126]: \narray(['00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00',\n       '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00',\n       '00', '00', '00', '00', '00', '00', '00', '00'], dtype=object)\n\nIn [127]: codes = l.TEAM_ID[:30].values\n\nIn [128]: codes\nOut[128]: \narray([1610612737, 1610612738, 1610612739, 1610612740, 1610612741,\n       1610612742, 1610612743, 1610612744, 1610612745, 1610612747,\n       1610612748, 1610612749, 1610612750, 1610612751, 1610612752,\n       1610612753, 1610612754, 1610612755, 1610612756, 1610612757,\n       1610612759, 1610612760, 1610612761, 1610612762, 1610612763,\n       1610612764, 1610612765, 1610612766, 1610612746, 1610612758])\n\nIn [129]: log = TeamGameLogs(codes[0])\n\nIn [130]: log\nOut[130]: <nba_py.team.TeamGameLogs at 0x11a2bf828>\n\nIn [131]: log.info()\nOut[131]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP    WL     W     L  \\\n0   1610612737  0021600557  JAN 07, 2017    ATL @ DAL  None   NaN   NaN   \n1   1610612737  0021600539  JAN 05, 2017    ATL @ NOP     W  20.0  16.0   \n2   1610612737  0021600530  JAN 04, 2017    ATL @ ORL     W  19.0  16.0   \n3   1610612737  0021600508  JAN 01, 2017  ATL vs. SAS     W  18.0  16.0   \n4   1610612737  0021600498  DEC 30, 2016  ATL vs. DET     W  17.0  16.0   \n5   1610612737  0021600478  DEC 28, 2016  ATL vs. NYK     W  16.0  16.0   \n6   1610612737  0021600468  DEC 26, 2016    ATL @ MIN     L  15.0  16.0   \n7   1610612737  0021600451  DEC 23, 2016    ATL @ DEN     W  15.0  15.0   \n8   1610612737  0021600430  DEC 21, 2016  ATL vs. MIN     L  14.0  15.0   \n9   1610612737  0021600415  DEC 19, 2016    ATL @ OKC     W  14.0  14.0   \n10  1610612737  0021600401  DEC 17, 2016  ATL vs. CHA     L  13.0  14.0   \n11  1610612737  0021600392  DEC 16, 2016    ATL @ TOR     W  13.0  13.0   \n12  1610612737  0021600369  DEC 13, 2016  ATL vs. ORL     L  12.0  13.0   \n13  1610612737  0021600340  DEC 09, 2016    ATL @ MIL     W  12.0  12.0   \n14  1610612737  0021600324  DEC 07, 2016  ATL vs. MIA     W  11.0  12.0   \n15  1610612737  0021600307  DEC 05, 2016  ATL vs. OKC     L  10.0  12.0   \n16  1610612737  0021600293  DEC 03, 2016    ATL @ TOR     L  10.0  11.0   \n17  1610612737  0021600288  DEC 02, 2016  ATL vs. DET     L  10.0  10.0   \n18  1610612737  0021600274  NOV 30, 2016    ATL @ PHX     L  10.0   9.0   \n19  1610612737  0021600259  NOV 28, 2016    ATL @ GSW     L  10.0   8.0   \n20  1610612737  0021600252  NOV 27, 2016    ATL @ LAL     L  10.0   7.0   \n21  1610612737  0021600231  NOV 25, 2016    ATL @ UTA     L  10.0   6.0   \n22  1610612737  0021600216  NOV 23, 2016    ATL @ IND     W  10.0   5.0   \n23  1610612737  0021600209  NOV 22, 2016  ATL vs. NOP     L   9.0   5.0   \n24  1610612737  0021600193  NOV 20, 2016    ATL @ NYK     L   9.0   4.0   \n25  1610612737  0021600174  NOV 18, 2016    ATL @ CHA     L   9.0   3.0   \n26  1610612737  0021600163  NOV 16, 2016  ATL vs. MIL     W   9.0   2.0   \n27  1610612737  0021600154  NOV 15, 2016    ATL @ MIA     W   8.0   2.0   \n28  1610612737  0021600132  NOV 12, 2016  ATL vs. PHI     W   7.0   2.0   \n29  1610612737  0021600111  NOV 09, 2016  ATL vs. CHI     W   6.0   2.0   \n30  1610612737  0021600100  NOV 08, 2016    ATL @ CLE     W   5.0   2.0   \n31  1610612737  0021600084  NOV 05, 2016  ATL vs. HOU     W   4.0   2.0   \n32  1610612737  0021600070  NOV 04, 2016    ATL @ WAS     L   3.0   2.0   \n33  1610612737  0021600059  NOV 02, 2016  ATL vs. LAL     L   3.0   1.0   \n34  1610612737  0021600044  OCT 31, 2016  ATL vs. SAC     W   3.0   0.0   \n35  1610612737  0021600026  OCT 29, 2016    ATL @ PHI     W   2.0   0.0   \n36  1610612737  0021600014  OCT 27, 2016  ATL vs. WAS     W   1.0   0.0   \n\n    W_PCT  MIN  FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0     NaN  120   20 ...    0.875     6    29   35   13    5    1    8  13   62  \n1   0.556  240   38 ...    0.824    12    43   55   23    9    6   14  14   99  \n2   0.543  240   44 ...    0.722     3    36   39   27   12    3   12  12  111  \n3   0.529  265   42 ...    0.593    11    35   46   25    6    6   11  21  114  \n4   0.515  240   39 ...    0.760    12    32   44   29   10    2   15  21  105  \n5   0.500  265   37 ...    0.778    18    38   56   19    8    3   13  19  102  \n6   0.484  240   35 ...    0.706    17    29   46   20    8    7   19  19   90  \n7   0.500  240   37 ...    0.818    10    31   41   26   10    4    8  25  109  \n8   0.483  240   34 ...    0.692     8    27   35   19    9    8   10  15   84  \n9   0.500  240   41 ...    0.792     5    30   35   24    5    2   15  20  110  \n10  0.481  240   40 ...    0.563     9    38   47   26    4    2   12  18   99  \n11  0.500  240   46 ...    0.688    15    29   44   26    6    6   14  22  125  \n12  0.480  240   45 ...    0.905    13    32   45   29    6    4   15  16  120  \n13  0.500  240   40 ...    0.759     9    37   46   32    7    8   17  11  114  \n14  0.478  240   43 ...    0.867    14    33   47   27    9    9   14  20  103  \n15  0.455  240   34 ...    0.750     7    29   36   26   13    3   18  24   99  \n16  0.476  240   35 ...    0.500    13    25   38   21    7    5   18  13   84  \n17  0.500  240   32 ...    0.750     6    26   32   22    6    2    7  12   85  \n18  0.526  240   45 ...    0.800     7    33   40   20    9    6   20  22  107  \n19  0.556  240   36 ...    0.700    14    37   51   20   11    4   18  22  100  \n20  0.588  240   39 ...    0.400     7    31   38   25    5    6   12  19   94  \n21  0.625  240   26 ...    0.667     6    34   40   11    8    4   14  16   68  \n22  0.667  240   36 ...    0.864    17    39   56   17   11    7   21  18   96  \n23  0.643  240   39 ...    0.600     6    34   40   22    5    6   15  15   94  \n24  0.692  240   34 ...    0.690    14    34   48   17    7    6   13  15   94  \n25  0.750  240   39 ...    0.647     8    41   49   25    9    6   16  18   96  \n26  0.818  240   35 ...    0.871     3    36   39   29    6    8   16  17  107  \n27  0.800  240   37 ...    0.684     6    29   35   18   14    4   19  13   93  \n28  0.778  240   48 ...    0.571    15    37   52   31   10    6   16  14  117  \n29  0.750  240   42 ...    0.815    13    35   48   24    8    7   21  20  115  \n30  0.714  240   41 ...    0.708    11    39   50   22    1    4   19  21  110  \n31  0.667  240   45 ...    0.583    13    31   44   29   17    6   19  13  112  \n32  0.600  240   32 ...    0.639    10    37   47   22   12    3   18  24   92  \n33  0.750  240   41 ...    0.793    10    27   37   30   10    1   18  19  116  \n34  1.000  240   33 ...    0.617    17    26   43   24   11    6   13  20  106  \n35  1.000  240   42 ...    0.652     6    41   47   31   11    7   12  14  104  \n36  1.000  240   44 ...    0.778    14    38   52   28   13    7   21  19  114  \n\n[37 rows x 27 columns]\n\nIn [132]: log.info()d = dict((key, value) for key, value in zip(teams, codes))\n\nIn [133]: d = dict((key, value) for key, value in zip(teams, codes))\n\nIn [134]: d\nOut[134]: \n{'ATL': 1610612737,\n 'BKN': 1610612751,\n 'BOS': 1610612738,\n 'CHA': 1610612766,\n 'CHI': 1610612741,\n 'CLE': 1610612739,\n 'DAL': 1610612742,\n 'DEN': 1610612743,\n 'DET': 1610612765,\n 'GSW': 1610612744,\n 'HOU': 1610612745,\n 'IND': 1610612754,\n 'LAC': 1610612746,\n 'LAL': 1610612747,\n 'MEM': 1610612763,\n 'MIA': 1610612748,\n 'MIL': 1610612749,\n 'MIN': 1610612750,\n 'NOP': 1610612740,\n 'NYK': 1610612752,\n 'OKC': 1610612760,\n 'ORL': 1610612753,\n 'PHI': 1610612755,\n 'PHX': 1610612756,\n 'POR': 1610612757,\n 'SAC': 1610612758,\n 'SAS': 1610612759,\n 'TOR': 1610612761,\n 'UTA': 1610612762,\n 'WAS': 1610612764}\n\nIn [135]: log = TeamGameLogs(d['GSW'])\n\nIn [136]: log\nOut[136]: <nba_py.team.TeamGameLogs at 0x11a4a6a20>\n\nIn [137]: log = TeamGameLogs(d['GSW']).info()\n\nIn [138]: log\nOut[138]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n0   1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31  6  0.838  265   \n1   1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n2   1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n3   1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n4   1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n5   1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n6   1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n7   1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n8   1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n9   1610612744  0021600405  DEC 17, 2016  GSW vs. POR  W  24  4  0.857  240   \n10  1610612744  0021600388  DEC 15, 2016  GSW vs. NYK  W  23  4  0.852  240   \n11  1610612744  0021600371  DEC 13, 2016    GSW @ NOP  W  22  4  0.846  240   \n12  1610612744  0021600358  DEC 11, 2016    GSW @ MIN  W  21  4  0.840  240   \n13  1610612744  0021600351  DEC 10, 2016    GSW @ MEM  L  20  4  0.833  240   \n14  1610612744  0021600335  DEC 08, 2016    GSW @ UTA  W  20  3  0.870  240   \n15  1610612744  0021600330  DEC 07, 2016    GSW @ LAC  W  19  3  0.864  240   \n16  1610612744  0021600314  DEC 05, 2016  GSW vs. IND  W  18  3  0.857  240   \n17  1610612744  0021600299  DEC 03, 2016  GSW vs. PHX  W  17  3  0.850  240   \n18  1610612744  0021600281  DEC 01, 2016  GSW vs. HOU  L  16  3  0.842  290   \n19  1610612744  0021600259  NOV 28, 2016  GSW vs. ATL  W  16  2  0.889  240   \n20  1610612744  0021600244  NOV 26, 2016  GSW vs. MIN  W  15  2  0.882  240   \n21  1610612744  0021600238  NOV 25, 2016    GSW @ LAL  W  14  2  0.875  240   \n22  1610612744  0021600223  NOV 23, 2016  GSW vs. LAL  W  13  2  0.867  240   \n23  1610612744  0021600202  NOV 21, 2016    GSW @ IND  W  12  2  0.857  240   \n24  1610612744  0021600191  NOV 19, 2016    GSW @ MIL  W  11  2  0.846  240   \n25  1610612744  0021600179  NOV 18, 2016    GSW @ BOS  W  10  2  0.833  240   \n26  1610612744  0021600165  NOV 16, 2016    GSW @ TOR  W   9  2  0.818  240   \n27  1610612744  0021600143  NOV 13, 2016  GSW vs. PHX  W   8  2  0.800  240   \n28  1610612744  0021600119  NOV 10, 2016    GSW @ DEN  W   7  2  0.778  240   \n29  1610612744  0021600116  NOV 09, 2016  GSW vs. DAL  W   6  2  0.750  240   \n30  1610612744  0021600099  NOV 07, 2016  GSW vs. NOP  W   5  2  0.714  240   \n31  1610612744  0021600078  NOV 04, 2016    GSW @ LAL  L   4  2  0.667  240   \n32  1610612744  0021600069  NOV 03, 2016  GSW vs. OKC  W   4  1  0.800  240   \n33  1610612744  0021600054  NOV 01, 2016    GSW @ POR  W   3  1  0.750  240   \n34  1610612744  0021600036  OCT 30, 2016    GSW @ PHX  W   2  1  0.667  240   \n35  1610612744  0021600025  OCT 28, 2016    GSW @ NOP  W   1  1  0.500  240   \n36  1610612744  0021600003  OCT 25, 2016  GSW vs. SAS  L   0  1  0.000  240   \n\n    FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0    41 ...    0.744     7    37   44   23    7    5   16  21  119  \n1    44 ...    0.828     8    31   39   31   14    9   15  20  125  \n2    50 ...    0.762    12    31   43   33    7    2   13  14  127  \n3    42 ...    0.867     4    39   43   31    5    4   13  12  108  \n4    46 ...    0.833     9    42   51   33    4    9   20  16  121  \n5    37 ...    0.862     5    37   42   25    8    4   19  24  108  \n6    43 ...    0.917     4    37   41   35    9    2   22  21  119  \n7    47 ...    0.786    11    40   51   29   19    7   12  19  117  \n8    40 ...    0.882     9    41   50   24   13    3   10  18  104  \n9    51 ...    0.731     9    47   56   36    7    5   15  16  135  \n10   45 ...    0.500    15    42   57   41    7   10   17  17  103  \n11   42 ...    0.789     9    36   45   30    6    5   12  12  113  \n12   38 ...    0.900     6    31   37   30    9    4    8  24  116  \n13   34 ...    0.600    10    32   42   15    6    8   23  23   89  \n14   39 ...    0.696     9    38   47   26   10    4   16  23  106  \n15   42 ...    0.828    12    33   45   32   12    4   11  24  115  \n16   54 ...    0.769    16    38   54   45   12   13   11  22  142  \n17   49 ...    0.765     6    32   38   37    9    5   17  19  138  \n18   43 ...    0.784    13    41   54   31   12    7   17  27  127  \n19   37 ...    0.792     7    34   41   25    6   10   14  20  105  \n20   45 ...    0.824    12    33   45   25    9    8   18  14  115  \n21   43 ...    0.706     4    40   44   31   10   10   17  21  109  \n22   53 ...    0.686     6    42   48   47    7    5   10  20  149  \n23   40 ...    0.844    12    48   60   31    9   10   12  17  120  \n24   42 ...    0.813    18    27   45   30    8    5   12  25  124  \n25   44 ...    0.583     9    41   50   33   10    7   11  20  104  \n26   44 ...    0.929     7    28   35   33    9    7   12  25  127  \n27   45 ...    0.871     8    35   43   32    8    7   16  20  133  \n28   46 ...    0.950     9    35   44   33   15    6   15  18  125  \n29   43 ...    0.591     5    34   39   33    3    5   15  22  116  \n30   45 ...    0.833    10    28   38   35   14    4   15  17  116  \n31   39 ...    0.700     9    31   40   26   13    3   20  13   97  \n32   46 ...    0.800    15    31   46   27    9   14   15  18  122  \n33   50 ...    0.739     7    38   45   36   14    4   16  19  127  \n34   35 ...    0.848     7    36   43   27    6    5   15  23  106  \n35   44 ...    0.893     9    40   49   32    8    2   14  22  122  \n36   40 ...    0.722     8    27   35   24   11    6   16  19  100  \n\n[37 rows x 27 columns]\n\nIn [139]: from bokeh.models.widgets.inputs.InputWidget import DatePicker\n\nImportErrorTraceback (most recent call last)\n<ipython-input-139-5af4de561c3d> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20626f6b65682e6d6f64656c732e776964676574732e696e707574732e496e70757457696467657420696d706f727420446174655069636b65720a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'bokeh.models.widgets.inputs.InputWidget'; 'bokeh.models.widgets.inputs' is not a package\n\nIn [140]: from bokeh.models.widgets import Slider, Select, TextInput, DateRangeSlider\n\nIn [141]: help(DateRangeSlider)\nHelp on class DateRangeSlider in module bokeh.models.widgets.inputs:\n\nclass DateRangeSlider(InputWidget)\n |  Slider-based date range selection widget.\n |  \n |  Method resolution order:\n |      DateRangeSlider\n |      InputWidget\n |      bokeh.models.widgets.widget.Widget\n |      bokeh.models.layouts.LayoutDOM\n |      bokeh.model.Model\n |      bokeh.core.properties.HasProps\n |      bokeh.util.callback_manager.CallbackManager\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  get_class(view_model_name) from builtins.type\n |      Given a __view_model__ name, returns the corresponding class\n |      object\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  arrows\n |      Whether to show clickable arrows on both ends of the slider.\n |  \n |  bounds\n |      The earliest and latest allowable dates.\n |  \n |  callback\n |      A callback to run in the browser whenever either slider's value changes.\n |  \n |  enabled\n |      Enable or disable this widget.\n |  \n |  range\n |      [TDB]\n |  \n |  step\n |      The step between consecutive dates.\n |  \n |  value\n |      The initial or selected date range.\n |  \n |  value_labels\n |      Show or hide value labels on both sides of the slider.\n |  \n |  wheel_mode\n |      Whether mouse zoom should scroll or zoom selected range (or\n |      do nothing).\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __container_props__ = {'bounds', 'range', 'step', 'value'}\n |  \n |  __properties__ = {'arrows', 'bounds', 'callback', 'enabled', 'range', ...\n |  \n |  __properties_with_refs__ = {'callback'}\n |  \n |  __view_model__ = 'DateRangeSlider'\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from InputWidget:\n |  \n |  coerce_value(val) from bokeh.model.Viewable\n |  \n |  create(*args, **kwargs) from bokeh.model.Viewable\n |      Only called the first time we make an object,\n |      whereas __init__ is called every time it's loaded\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from InputWidget:\n |  \n |  title\n |      Widget's label.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from InputWidget:\n |  \n |  __cached_all__properties__ = {'disabled', 'height', 'name', 'sizing_mo...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.models.layouts.LayoutDOM:\n |  \n |  __repr_html__(self)\n |      # TODO: (mp) Not yet, because it breaks plotting/notebook examples.\n |      # Rename to _repr_html_ if we decide to enable this by default.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.models.layouts.LayoutDOM:\n |  \n |  disabled\n |      Whether the widget will be disabled when rendered. If ``True``,\n |      the widget will be greyed-out, and not respond to UI events.\n |  \n |  height\n |      An optional height for the component (in pixels).\n |  \n |  html\n |  \n |  sizing_mode\n |      How the item being displayed should size itself. Possible values are\n |      ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n |      ``\"stretch_both\"``.\n |      \n |      ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n |      will resize to occupy all available space, even if this changes the aspect ratio of the element.\n |      This is sometimes called outside-in, and is a typical behavior for desktop applications.\n |      \n |      ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n |      regardless of any subsequent browser window resize events.\n |      \n |      ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n |      maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n |      ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n |      \n |      ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n |      maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n |      ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n |      to be wrapped in a ``Row`` or ``Column`` to be responsive.\n |      \n |      ``\"scale_both\"`` elements will responsively resize to fir both the width and height available,\n |      *while maintaining the original aspect ratio*.\n |  \n |  width\n |      An optional width for the component (in pixels).\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.model.Model:\n |  \n |  __init__(self, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  layout(self, side, plot)\n |  \n |  references(self)\n |      Returns all ``Models`` that this object has references to.\n |  \n |  select(self, selector)\n |      Query this object and all of its references for objects that\n |      match the given selector.\n |      \n |      Args:\n |          selector (JSON-like) :\n |      \n |      Returns:\n |          seq[Model]\n |  \n |  select_one(self, selector)\n |      Query this object and all of its references for objects that\n |      match the given selector.  Raises an error if more than one object\n |      is found.  Returns single matching object, or None if nothing is found\n |      Args:\n |          selector (JSON-like) :\n |      \n |      Returns:\n |          Model\n |  \n |  set_select(self, selector, updates)\n |      Update objects that match a given selector with the specified\n |      attribute/value updates.\n |      \n |      Args:\n |          selector (JSON-like) :\n |          updates (dict) :\n |      \n |      Returns:\n |          None\n |  \n |  to_json(self, include_defaults)\n |      Returns a dictionary of the attributes of this object,\n |      containing only \"JSON types\" (string, number, boolean,\n |      none, dict, list).\n |      \n |      References to other objects are serialized as \"refs\" (just\n |      the object ID and type info), so the deserializer will\n |      need to separately have the full attributes of those\n |      other objects.\n |      \n |      There's no corresponding from_json() because to\n |      deserialize an object is normally done in the context of a\n |      Document (since the Document can resolve references).\n |      \n |      For most purposes it's best to serialize and deserialize\n |      entire documents.\n |      \n |      Args:\n |          include_defaults (bool) : whether to include attributes\n |              that haven't been changed from the default\n |  \n |  to_json_string(self, include_defaults)\n |      Returns a JSON string encoding the attributes of this object.\n |      \n |      References to other objects are serialized as references\n |      (just the object ID and type info), so the deserializer\n |      will need to separately have the full attributes of those\n |      other objects.\n |      \n |      There's no corresponding from_json_string() because to\n |      deserialize an object is normally done in the context of a\n |      Document (since the Document can resolve references).\n |      \n |      For most purposes it's best to serialize and deserialize\n |      entire documents.\n |      \n |      Args:\n |          include_defaults (bool) : whether to include attributes\n |              that haven't been changed from the default\n |  \n |  trigger(self, attr, old, new, hint=None)\n |      Trigger callbacks for ``attr`` on this object.\n |      \n |      Args:\n |          attr (str) :\n |          old (object) :\n |          new (object) :\n |      \n |      Returns:\n |          None\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from bokeh.model.Model:\n |  \n |  collect_models(*input_values) from bokeh.model.Viewable\n |      Iterate over ``input_values`` and descend through their structure\n |      collecting all nested ``Models`` on the go. The resulting list\n |      is duplicate-free based on objects' identifiers.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.model.Model:\n |  \n |  document\n |  \n |  name\n |  \n |  ref\n |  \n |  tags\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.core.properties.HasProps:\n |  \n |  __setattr__(self, name, value)\n |      Implement setattr(self, name, value).\n |  \n |  apply_theme(self, property_values)\n |      Apply a set of theme values which will be used rather than\n |      defaults, but will not override application-set values.\n |      \n |      The passed-in dictionary may be kept around as-is and shared with\n |      other instances to save memory (so neither the caller nor the\n |      |HasProps| instance should modify it).\n |      \n |      .. |HasProps| replace:: :class:`~bokeh.properties.HasProps`\n |  \n |  pprint_props(self, indent=0)\n |      Prints the properties of this object, nicely formatted\n |  \n |  properties_with_values(self, include_defaults=True)\n |      Return a dict from property names to the current values of those\n |      properties.\n |      \n |      Non-serializable properties are skipped and property values are in\n |      \"serialized\" format which may be slightly different from the values\n |      you would normally read from the properties; the intent of this method\n |      is to return the information needed to losslessly reconstitute the\n |      object instance.\n |      \n |      Args:\n |          include_defaults (bool, optional) :\n |              Whether to include properties that haven't been set. (default: True)\n |      \n |      Returns:\n |         dict : mapping from property names to their values\n |  \n |  set(self, **kwargs)\n |      Sets a number of properties at once\n |  \n |  set_from_json(self, name, json, models=None)\n |      Sets a property of the object using JSON and a dictionary mapping\n |      model ids to model instances. The model instances are necessary if the\n |      JSON contains references to models.\n |  \n |  themed_values(self)\n |      Get any theme-provided overrides as a dict from property name\n |      to value, or None if no theme overrides any values for this instance.\n |  \n |  unapply_theme(self)\n |  \n |  update(self, **kwargs)\n |      Updates the object's properties from the given keyword args.\n |  \n |  update_from_json(self, json_attributes, models=None)\n |      Updates the object's properties from a JSON attributes dictionary.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from bokeh.core.properties.HasProps:\n |  \n |  dataspecs() from bokeh.model.Viewable\n |      Returns a set of the names of this object's dataspecs (and\n |      dataspec subclasses).  Traverses the class hierarchy.\n |  \n |  dataspecs_with_props() from bokeh.model.Viewable\n |      Returns a dict of dataspec names to dataspec properties.\n |  \n |  lookup(name) from bokeh.model.Viewable\n |  \n |  properties(with_bases=True) from bokeh.model.Viewable\n |      Return a set of the names of this object's properties. If\n |      ``with_bases`` is True, we traverse the class hierarchy\n |      and pull together the full list of properties; if False,\n |      we only return the properties introduced in the class\n |      itself.\n |      \n |      Args:\n |         with_bases (bool, optional) :\n |          Whether to include properties that haven't been set. (default: True)\n |      \n |      Returns:\n |         a set of property names\n |  \n |  properties_containers() from bokeh.model.Viewable\n |      Returns a list of properties that are containers.\n |  \n |  properties_with_refs() from bokeh.model.Viewable\n |      Return a set of the names of this object's properties that\n |      have references. We traverse the class hierarchy and\n |      pull together the full list of properties.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from bokeh.core.properties.HasProps:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from bokeh.util.callback_manager.CallbackManager:\n |  \n |  on_change(self, attr, *callbacks)\n |      Add a callback on this object to trigger when ``attr`` changes.\n |      \n |      Args:\n |          attr (str) : an attribute name on this object\n |          callback (callable) : a callback function to register\n |      \n |      Returns:\n |          None\n |  \n |  remove_on_change(self, attr, *callbacks)\n |      Remove a callback from this object\n\n\nIn [142]: from datetime import datetime\n\nIn [143]: datetime(2017)\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-143-b76f66f5f021> in <module>()\n----> 1 datetime(2017)\n\nTypeError: Required argument 'month' (pos 2) not found\n\nIn [144]: datetime(2017, 2, 1)\nOut[144]: datetime.datetime(2017, 2, 1, 0, 0)\n\nIn [145]: date_range = DateRangeSlider(title='Choose a time period to view',\n                             bounds=(datetime(year=1950, month=1, day=1),\n                                     datetime.now()),\n                             value=datetime(year=2016, month=8, day=2017))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-145-e9a2f4817f25> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"646174655f72616e6765203d204461746552616e6765536c69646572287469746c653d2743686f6f736520612074696d6520706572696f6420746f2076696577272c0a2020202020202020202020202020202020202020202020202020202020626f756e64733d286461746574696d6528796561723d313935302c206d6f6e74683d312c206461793d31292c0a202020202020202020202020202020202020202020202020202020202020202020202020206461746574696d652e6e6f772829292c0a202020202020202020202020202020202020202020202020202020202076616c75653d6461746574696d6528796561723d323031362c206d6f6e74683d382c206461793d3230313729290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nValueError: day is out of range for month\n\nIn [146]: date_range = DateRangeSlider(title='Choose a time period to view',\n                             bounds=(datetime(year=1950, month=1, day=1),\n                                     datetime.now()),\n                             value=datetime(year=2016, month=10, day=27))\n\nValueErrorTraceback (most recent call last)\n<ipython-input-146-d0576a266e78> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"646174655f72616e6765203d204461746552616e6765536c69646572287469746c653d2743686f6f736520612074696d6520706572696f6420746f2076696577272c0a2020202020202020202020202020202020202020202020202020202020626f756e64733d286461746574696d6528796561723d313935302c206d6f6e74683d312c206461793d31292c0a202020202020202020202020202020202020202020202020202020202020202020202020206461746574696d652e6e6f772829292c0a202020202020202020202020202020202020202020202020202020202076616c75653d6461746574696d6528796561723d323031362c206d6f6e74683d31302c206461793d323729290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/model.py in __init__(self, **kwargs)\n     83         self._id = kwargs.pop(\"id\", make_id())\n     84         self._document = None\n---> 85         super(Model, self).__init__(**kwargs)\n     86         default_theme.apply_to_model(self)\n     87 \n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in __init__(self, **properties)\n    701 \n    702         for name, value in properties.items():\n--> 703             setattr(self, name, value)\n    704 \n    705     def __setattr__(self, name, value):\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in __setattr__(self, name, value)\n    714 \n    715         if name in props or name in deprecated:\n--> 716             super(HasProps, self).__setattr__(name, value)\n    717         else:\n    718             matches, text = difflib.get_close_matches(name.lower(), props), \"similar\"\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in __set__(self, obj, value)\n    453             raise RuntimeError(\"Cannot set a property value '%s' on a %s instance before HasProps.__init__\" %\n    454                                (self.name, obj.__class__.__name__))\n--> 455         value = self.descriptor.prepare_value(obj.__class__, self.name, value)\n    456 \n    457         old = self.__get__(obj)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in prepare_value(self, cls, name, value)\n    270                     break\n    271             else:\n--> 272                 raise e\n    273         else:\n    274             value = self.transform(value)\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in prepare_value(self, cls, name, value)\n    263     def prepare_value(self, cls, name, value):\n    264         try:\n--> 265             self.validate(value)\n    266         except ValueError as e:\n    267             for tp, converter in self.alternatives:\n\n/Users/baasman/anaconda/lib/python3.5/site-packages/bokeh/core/properties.py in validate(self, value)\n   1149             if not (isinstance(value, (tuple, list)) and len(self.type_params) == len(value) and \\\n   1150                     all(type_param.is_valid(item) for type_param, item in zip(self.type_params, value))):\n-> 1151                 raise ValueError(\"expected an element of %s, got %r\" % (self, value))\n   1152 \n   1153     def __str__(self):\n\nValueError: expected an element of Tuple(Date, Date), got datetime.datetime(2016, 10, 27, 0, 0)\n\nIn [147]: date_range = DateRangeSlider(title='Choose a time period to view',\n                             bounds=(datetime(year=1950, month=1, day=1),\n                                     datetime.now()),\n                             value=(datetime(year=2016, month=10, day=27),\n                                    datetime.now())\n  File \"<string>\", line 5\n    datetime.now())\n                   ^\nSyntaxError: unexpected EOF while parsing\n\n\nIn [148]: date_range = DateRangeSlider(title='Choose a time period to view',\n                             bounds=(datetime(year=1950, month=1, day=1),\n                                     datetime.now()),\n                             value=(datetime(year=2016, month=10, day=27),\n                                    datetime.now()))\n\nIn [149]: date_range\nOut[149]: <bokeh.models.widgets.inputs.DateRangeSlider at 0x11a4a2780>\n\nIn [150]: date_range()\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-150-0cd80052f03c> in <module>()\n----> 1 date_range()\n\nTypeError: 'DateRangeSlider' object is not callable\n\nIn [151]: form bokeh.io import show, figure\n  File \"<string>\", line 1\n    form bokeh.io import show, figure\n             ^\nSyntaxError: invalid syntax\n\n\nIn [152]: tl\nOut[152]: \n   LEAGUE_ID     TEAM_ID MIN_YEAR MAX_YEAR ABBREVIATION\n0         00  1610612737     1949     2016          ATL\n1         00  1610612738     1946     2016          BOS\n2         00  1610612739     1970     2016          CLE\n3         00  1610612740     2002     2016          NOP\n4         00  1610612741     1966     2016          CHI\n5         00  1610612742     1980     2016          DAL\n6         00  1610612743     1976     2016          DEN\n7         00  1610612744     1946     2016          GSW\n8         00  1610612745     1967     2016          HOU\n9         00  1610612747     1948     2016          LAL\n10        00  1610612748     1988     2016          MIA\n11        00  1610612749     1968     2016          MIL\n12        00  1610612750     1989     2016          MIN\n13        00  1610612751     1976     2016          BKN\n14        00  1610612752     1946     2016          NYK\n15        00  1610612753     1989     2016          ORL\n16        00  1610612754     1976     2016          IND\n17        00  1610612755     1949     2016          PHI\n18        00  1610612756     1968     2016          PHX\n19        00  1610612757     1970     2016          POR\n20        00  1610612759     1976     2016          SAS\n21        00  1610612760     1967     2016          OKC\n22        00  1610612761     1995     2016          TOR\n23        00  1610612762     1974     2016          UTA\n24        00  1610612763     1995     2016          MEM\n25        00  1610612764     1961     2016          WAS\n26        00  1610612765     1948     2016          DET\n27        00  1610612766     1988     2016          CHA\n28        00  1610612746     1970     2016          LAC\n29        00  1610612758     1948     2016          SAC\n30        00  1610610024     1947     1954         None\n31        00  1610610023     1949     1949         None\n32        00  1610610029     1948     1948         None\n33        00  1610610025     1946     1949         None\n34        00  1610610031     1946     1946         None\n35        00  1610610034     1946     1949         None\n36        00  1610610036     1946     1950         None\n37        00  1610610027     1949     1949         None\n38        00  1610610030     1949     1952         None\n39        00  1610610033     1949     1949         None\n40        00  1610610037     1949     1949         None\n41        00  1610610026     1946     1946         None\n42        00  1610610028     1946     1946         None\n43        00  1610610032     1946     1948         None\n44        00  1610610035     1946     1946         None\n\nIn [153]: teams\nOut[153]: \narray(['ATL', 'BOS', 'CLE', 'NOP', 'CHI', 'DAL', 'DEN', 'GSW', 'HOU',\n       'LAL', 'MIA', 'MIL', 'MIN', 'BKN', 'NYK', 'ORL', 'IND', 'PHI',\n       'PHX', 'POR', 'SAS', 'OKC', 'TOR', 'UTA', 'MEM', 'WAS', 'DET',\n       'CHA', 'LAC', 'SAC'], dtype=object)\n\nIn [154]: list(teams)\n\nTypeErrorTraceback (most recent call last)\n<ipython-input-154-727d59b26c48> in <module>()\n----> 1 list(teams)\n\nTypeError: 'DataFrame' object is not callable\n\nIn [155]: type(teams)\nOut[155]: numpy.ndarray\n\nIn [156]: type(teams.values)\n\nAttributeErrorTraceback (most recent call last)\n<ipython-input-156-63e87c549b4a> in <module>()\n----> 1 type(teams.values)\n\nAttributeError: 'numpy.ndarray' object has no attribute 'values'\n\nIn [157]: teams.shape\nOut[157]: (30,)\n\nIn [158]: teams.tolist\nOut[158]: <function ndarray.tolist>\n\nIn [159]: teams.tolist()\nOut[159]: \n['ATL',\n 'BOS',\n 'CLE',\n 'NOP',\n 'CHI',\n 'DAL',\n 'DEN',\n 'GSW',\n 'HOU',\n 'LAL',\n 'MIA',\n 'MIL',\n 'MIN',\n 'BKN',\n 'NYK',\n 'ORL',\n 'IND',\n 'PHI',\n 'PHX',\n 'POR',\n 'SAS',\n 'OKC',\n 'TOR',\n 'UTA',\n 'MEM',\n 'WAS',\n 'DET',\n 'CHA',\n 'LAC',\n 'SAC']\n\nIn [160]: d\nOut[160]: \n{'ATL': 1610612737,\n 'BKN': 1610612751,\n 'BOS': 1610612738,\n 'CHA': 1610612766,\n 'CHI': 1610612741,\n 'CLE': 1610612739,\n 'DAL': 1610612742,\n 'DEN': 1610612743,\n 'DET': 1610612765,\n 'GSW': 1610612744,\n 'HOU': 1610612745,\n 'IND': 1610612754,\n 'LAC': 1610612746,\n 'LAL': 1610612747,\n 'MEM': 1610612763,\n 'MIA': 1610612748,\n 'MIL': 1610612749,\n 'MIN': 1610612750,\n 'NOP': 1610612740,\n 'NYK': 1610612752,\n 'OKC': 1610612760,\n 'ORL': 1610612753,\n 'PHI': 1610612755,\n 'PHX': 1610612756,\n 'POR': 1610612757,\n 'SAC': 1610612758,\n 'SAS': 1610612759,\n 'TOR': 1610612761,\n 'UTA': 1610612762,\n 'WAS': 1610612764}\n\nIn [161]: from constants import teams\n\nImportErrorTraceback (most recent call last)\n<ipython-input-161-8fbbf1d4d916> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20636f6e7374616e747320696d706f7274207465616d730a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'constants'\n\nIn [162]: from constant import teams\n\nImportErrorTraceback (most recent call last)\n<ipython-input-162-a3fb48199a31> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20636f6e7374616e7420696d706f7274207465616d730a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'constant'\n\nIn [163]: team_options = teams.keys()\n\nAttributeErrorTraceback (most recent call last)\n<ipython-input-163-6cb69dac7258> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"7465616d5f6f7074696f6e73203d207465616d732e6b65797328290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nAttributeError: 'numpy.ndarray' object has no attribute 'keys'\n\nIn [164]: from constant import teams\n\nImportErrorTraceback (most recent call last)\n<ipython-input-164-a3fb48199a31> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20636f6e7374616e7420696d706f7274207465616d730a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'constant'\n\nIn [165]: from constants import teams\n\nImportErrorTraceback (most recent call last)\n<ipython-input-165-8fbbf1d4d916> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20636f6e7374616e747320696d706f7274207465616d730a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'constants'\n\nIn [166]: from constants import teams\n\nImportErrorTraceback (most recent call last)\n<ipython-input-166-8fbbf1d4d916> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"66726f6d20636f6e7374616e747320696d706f7274207465616d730a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nImportError: No module named 'constants'\n\nIn [167]: log\nOut[167]: \n       Team_ID     Game_ID     GAME_DATE      MATCHUP WL   W  L  W_PCT  MIN  \\\n0   1610612744  0021600550  JAN 06, 2017  GSW vs. MEM  L  31  6  0.838  265   \n1   1610612744  0021600534  JAN 04, 2017  GSW vs. POR  W  31  5  0.861  240   \n2   1610612744  0021600520  JAN 02, 2017  GSW vs. DEN  W  30  5  0.857  240   \n3   1610612744  0021600501  DEC 30, 2016  GSW vs. DAL  W  29  5  0.853  240   \n4   1610612744  0021600485  DEC 28, 2016  GSW vs. TOR  W  28  5  0.848  240   \n5   1610612744  0021600457  DEC 25, 2016    GSW @ CLE  L  27  5  0.844  240   \n6   1610612744  0021600446  DEC 23, 2016    GSW @ DET  W  27  4  0.871  240   \n7   1610612744  0021600437  DEC 22, 2016    GSW @ BKN  W  26  4  0.867  240   \n8   1610612744  0021600427  DEC 20, 2016  GSW vs. UTA  W  25  4  0.862  240   \n9   1610612744  0021600405  DEC 17, 2016  GSW vs. POR  W  24  4  0.857  240   \n10  1610612744  0021600388  DEC 15, 2016  GSW vs. NYK  W  23  4  0.852  240   \n11  1610612744  0021600371  DEC 13, 2016    GSW @ NOP  W  22  4  0.846  240   \n12  1610612744  0021600358  DEC 11, 2016    GSW @ MIN  W  21  4  0.840  240   \n13  1610612744  0021600351  DEC 10, 2016    GSW @ MEM  L  20  4  0.833  240   \n14  1610612744  0021600335  DEC 08, 2016    GSW @ UTA  W  20  3  0.870  240   \n15  1610612744  0021600330  DEC 07, 2016    GSW @ LAC  W  19  3  0.864  240   \n16  1610612744  0021600314  DEC 05, 2016  GSW vs. IND  W  18  3  0.857  240   \n17  1610612744  0021600299  DEC 03, 2016  GSW vs. PHX  W  17  3  0.850  240   \n18  1610612744  0021600281  DEC 01, 2016  GSW vs. HOU  L  16  3  0.842  290   \n19  1610612744  0021600259  NOV 28, 2016  GSW vs. ATL  W  16  2  0.889  240   \n20  1610612744  0021600244  NOV 26, 2016  GSW vs. MIN  W  15  2  0.882  240   \n21  1610612744  0021600238  NOV 25, 2016    GSW @ LAL  W  14  2  0.875  240   \n22  1610612744  0021600223  NOV 23, 2016  GSW vs. LAL  W  13  2  0.867  240   \n23  1610612744  0021600202  NOV 21, 2016    GSW @ IND  W  12  2  0.857  240   \n24  1610612744  0021600191  NOV 19, 2016    GSW @ MIL  W  11  2  0.846  240   \n25  1610612744  0021600179  NOV 18, 2016    GSW @ BOS  W  10  2  0.833  240   \n26  1610612744  0021600165  NOV 16, 2016    GSW @ TOR  W   9  2  0.818  240   \n27  1610612744  0021600143  NOV 13, 2016  GSW vs. PHX  W   8  2  0.800  240   \n28  1610612744  0021600119  NOV 10, 2016    GSW @ DEN  W   7  2  0.778  240   \n29  1610612744  0021600116  NOV 09, 2016  GSW vs. DAL  W   6  2  0.750  240   \n30  1610612744  0021600099  NOV 07, 2016  GSW vs. NOP  W   5  2  0.714  240   \n31  1610612744  0021600078  NOV 04, 2016    GSW @ LAL  L   4  2  0.667  240   \n32  1610612744  0021600069  NOV 03, 2016  GSW vs. OKC  W   4  1  0.800  240   \n33  1610612744  0021600054  NOV 01, 2016    GSW @ POR  W   3  1  0.750  240   \n34  1610612744  0021600036  OCT 30, 2016    GSW @ PHX  W   2  1  0.667  240   \n35  1610612744  0021600025  OCT 28, 2016    GSW @ NOP  W   1  1  0.500  240   \n36  1610612744  0021600003  OCT 25, 2016  GSW vs. SAS  L   0  1  0.000  240   \n\n    FGM ...   FT_PCT  OREB  DREB  REB  AST  STL  BLK  TOV  PF  PTS  \n0    41 ...    0.744     7    37   44   23    7    5   16  21  119  \n1    44 ...    0.828     8    31   39   31   14    9   15  20  125  \n2    50 ...    0.762    12    31   43   33    7    2   13  14  127  \n3    42 ...    0.867     4    39   43   31    5    4   13  12  108  \n4    46 ...    0.833     9    42   51   33    4    9   20  16  121  \n5    37 ...    0.862     5    37   42   25    8    4   19  24  108  \n6    43 ...    0.917     4    37   41   35    9    2   22  21  119  \n7    47 ...    0.786    11    40   51   29   19    7   12  19  117  \n8    40 ...    0.882     9    41   50   24   13    3   10  18  104  \n9    51 ...    0.731     9    47   56   36    7    5   15  16  135  \n10   45 ...    0.500    15    42   57   41    7   10   17  17  103  \n11   42 ...    0.789     9    36   45   30    6    5   12  12  113  \n12   38 ...    0.900     6    31   37   30    9    4    8  24  116  \n13   34 ...    0.600    10    32   42   15    6    8   23  23   89  \n14   39 ...    0.696     9    38   47   26   10    4   16  23  106  \n15   42 ...    0.828    12    33   45   32   12    4   11  24  115  \n16   54 ...    0.769    16    38   54   45   12   13   11  22  142  \n17   49 ...    0.765     6    32   38   37    9    5   17  19  138  \n18   43 ...    0.784    13    41   54   31   12    7   17  27  127  \n19   37 ...    0.792     7    34   41   25    6   10   14  20  105  \n20   45 ...    0.824    12    33   45   25    9    8   18  14  115  \n21   43 ...    0.706     4    40   44   31   10   10   17  21  109  \n22   53 ...    0.686     6    42   48   47    7    5   10  20  149  \n23   40 ...    0.844    12    48   60   31    9   10   12  17  120  \n24   42 ...    0.813    18    27   45   30    8    5   12  25  124  \n25   44 ...    0.583     9    41   50   33   10    7   11  20  104  \n26   44 ...    0.929     7    28   35   33    9    7   12  25  127  \n27   45 ...    0.871     8    35   43   32    8    7   16  20  133  \n28   46 ...    0.950     9    35   44   33   15    6   15  18  125  \n29   43 ...    0.591     5    34   39   33    3    5   15  22  116  \n30   45 ...    0.833    10    28   38   35   14    4   15  17  116  \n31   39 ...    0.700     9    31   40   26   13    3   20  13   97  \n32   46 ...    0.800    15    31   46   27    9   14   15  18  122  \n33   50 ...    0.739     7    38   45   36   14    4   16  19  127  \n34   35 ...    0.848     7    36   43   27    6    5   15  23  106  \n35   44 ...    0.893     9    40   49   32    8    2   14  22  122  \n36   40 ...    0.722     8    27   35   24   11    6   16  19  100  \n\n[37 rows x 27 columns]\n\nIn [168]: from bokeh.models.widgets import Slider, Select, TextInput, DateRangeSlider, Button\n\nIn [169]: show(widgetbox(begin, end, team, view_data))\n\nNameErrorTraceback (most recent call last)\n<ipython-input-169-ffdf09f64998> in <module>()\n----> 1 from binascii import unhexlify as __un; exec(compile(__un(\"73686f7728776964676574626f7828626567696e2c20656e642c207465616d2c20766965775f6461746129290a\").decode(\"utf-8\"), \"<string>\", \"exec\"))\n\n<string> in <module>()\n\nNameError: name 'begin' is not defined\n\nIn [170]: from bokeh.models.widgets import Slider, Select, TextInput, DateRangeSlider, Button, Paragraph\n\nIn [171]: ",
			"settings":
			{
				"buffer_size": 109798,
				"line_ending": "Unix",
				"name": "*REPL* [python]",
				"scratch": true
			}
		},
		{
			"contents": "teams = {\n 'ATL': 1610612737,\n 'BKN': 1610612751,\n 'BOS': 1610612738,\n 'CHA': 1610612766,\n 'CHI': 1610612741,\n 'CLE': 1610612739,\n 'DAL': 1610612742,\n 'DEN': 1610612743,\n 'DET': 1610612765,\n 'GSW': 1610612744,\n 'HOU': 1610612745,\n 'IND': 1610612754,\n 'LAC': 1610612746,\n 'LAL': 1610612747,\n 'MEM': 1610612763,\n 'MIA': 1610612748,\n 'MIL': 1610612749,\n 'MIN': 1610612750,\n 'NOP': 1610612740,\n 'NYK': 1610612752,\n 'OKC': 1610612760,\n 'ORL': 1610612753,\n 'PHI': 1610612755,\n 'PHX': 1610612756,\n 'POR': 1610612757,\n 'SAC': 1610612758,\n 'SAS': 1610612759,\n 'TOR': 1610612761,\n 'UTA': 1610612762,\n 'WAS': 1610612764\n}\n",
			"file": "constanst.py",
			"file_size": 611,
			"file_write_time": 131283957620000000,
			"settings":
			{
				"buffer_size": 611,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/SublimeREPL-python.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"repl: ipyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"syntax: pyth",
				"Set Syntax: Python"
			],
			[
				"repl: ip",
				"SublimeREPL: Python - IPython"
			],
			[
				"sync",
				"SFTP: Sync Local -> Remote…"
			],
			[
				"indent",
				"Indentation: Convert to Spaces"
			],
			[
				"indent ",
				"Indentation: Convert to Spaces"
			],
			[
				"repl: ipyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: r",
				"SublimeREPL: R"
			],
			[
				"repl: pyth",
				"SublimeREPL: Python"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"syntax: rex",
				"Set Syntax: R Extended"
			],
			[
				"syntax: pt",
				"Set Syntax: Python"
			],
			[
				"syntax: pyt",
				"Set Syntax: Python"
			],
			[
				"build wi",
				"Build: New Build System"
			],
			[
				"syntax: scala",
				"Set Syntax: Scala"
			],
			[
				"syntax: javasc",
				"Set Syntax: JavaScript"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"syntax: pytho",
				"Set Syntax: Python"
			],
			[
				"anaconda: set ",
				"Anaconda: Set Python interpreter"
			],
			[
				"text pastry: ",
				"Text Pastry: From 1 To X"
			],
			[
				"repl: ipy",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: she",
				"SublimeREPL: Shell"
			],
			[
				"repl: pyth\t",
				"SublimeREPL: Python - IPython"
			],
			[
				"syntax: she",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"repl: pyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"git: ",
				"Git: Gui"
			],
			[
				"gitig",
				"Gitignore: New gitignore"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"syntax: shel",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"repl: shel",
				"SublimeREPL: Shell"
			],
			[
				"repl: shel\t",
				"SublimeREPL: Shell"
			],
			[
				"set syntax: pytho",
				"Set Syntax: Python"
			],
			[
				"key bin",
				"Preferences: Key Bindings"
			],
			[
				"setting",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"indentat",
				"Indentation: Convert to Spaces"
			],
			[
				"whit",
				"Whitespace: Remove Trailing Whitespace"
			],
			[
				"set syntax: jso",
				"Set Syntax: JSON"
			],
			[
				"set syntax: she",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"set syntax: html",
				"Set Syntax: HTML"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"repl: python",
				"SublimeREPL: Python - IPython"
			],
			[
				"repl: shell",
				"SublimeREPL: Shell"
			],
			[
				"set syntax: pyth\t",
				"Set Syntax: Python"
			],
			[
				"REPL: shel",
				"SublimeREPL: Shell"
			],
			[
				"REPL: R",
				"SublimeREPL: R"
			],
			[
				"syntax: R",
				"Set Syntax: R"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"preference",
				"Preferences: Browse Packages"
			],
			[
				"REPL: pyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"syntax",
				"Set Syntax: Markdown"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/baasman/Documents/python-workspace/nba_viz"
	],
	"file_history":
	[
		"/Users/baasman/Documents/python-workspace/movies/query.py",
		"/Users/baasman/Documents/python-workspace/nba_viz/__init__.py",
		"/Users/baasman/Documents/python-workspace/movies/description.html",
		"/Users/baasman/Documents/python-workspace/nba_viz/constants",
		"/Users/baasman/Documents/python-workspace/testmac/stylin.py",
		"/Users/baasman/Documents/python-workspace/movies/query.sql",
		"/Users/baasman/Documents/python-workspace/movies/genres.txt",
		"/Users/baasman/Documents/python-workspace/testmac/widgets.py",
		"/Users/baasman/Documents/python-workspace/testmac/interactions.py",
		"/Users/baasman/Documents/python-workspace/testmac/datasource.py",
		"/Users/baasman/Documents/python-workspace/testmac/testbokeh.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Anaconda/Default (OSX).sublime-keymap",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/chapter16.py",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/chapter15.py",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/deeplearning.sublime-project",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/sonar.csv",
		"/Users/baasman/Documents/python-workspace/deep_learning_fun/pima-indians-diabetes.csv",
		"/Users/baasman/Documents/python-workspace/microblog/microblog.sublime-project",
		"/Users/baasman/Documents/python-workspace/flaskr/MANIFEST.in",
		"/Users/baasman/Documents/python-workspace/flaskr/flaskr/__init__.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SendREPL/SendREPL (OSX).sublime-settings",
		"/Users/baasman/Documents/python-workspace/pyspark_tests/test.r",
		"/Users/baasman/Documents/python-workspace/pyspark_tests/__init__.py",
		"/Users/baasman/spark-2.0.2-bin-hadoop2.7/python/run-tests.py",
		"/Users/baasman/spark-2.0.2-bin-hadoop2.7/README.md",
		"/Users/baasman/Downloads/run_all2016-12-23_16.log",
		"/Users/baasman/Documents/python-workspace/hot_gym/Rec Center_out.csv",
		"/Users/baasman/Documents/python-workspace/hot_gym/model_params/__init__.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/model_params/model_params.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/swarm/description.py",
		"/Users/baasman/Documents/python-workspace/hot_gym/hot_gym.sublime-project",
		"/Users/baasman/Documents/python-workspace/nupic/nupic.sublime-project",
		"/Users/baasman/Documents/python-workspace/nupic/test.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SublimeREPL/project_venv_repls.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/items.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/models.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/pipelines.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/worst_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/utility.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/settings.py",
		"/Users/baasman/.bash_profile",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_albums.jl",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/scrapy.cfg",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/.gitignore",
		"/Users/baasman/.vimrc",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/__init__.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper.sublime-project",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/top_music_charts.py",
		"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders/top_music_charts",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes_spider.py",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes.json",
		"/Users/baasman/Documents/python-workspace/tutorial/tutorial/spiders/quotes-2.html",
		"/Users/baasman/Documents/python-workspace/bokeh/bokeh_tutorial.py",
		"/Users/baasman/Documents/r-workspace/test_sub.R",
		"/Users/baasman/Documents/python-workspace/pyprogeny/README.md",
		"/Users/baasman/Documents/python-workspace/pyprogeny/pyprogeny.py",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Pylinter/Pylinter.sublime-settings",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/Users/baasman/Library/Application Support/Sublime Text 3/Packages/User/SublimeREPL-python.sublime-build",
		"/Users/baasman/Documents/test.py",
		"/Users/baasman/Documents/python-workspace/test.py",
		"/Users/baasman/Downloads/pyprogeny.py",
		"/Users/baasman/Documents/python-workspace/pyprogeny/.gitignore",
		"/Users/baasman/Documents/python-workspace/django/fish_love/fish_love/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/polls/style.css",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/polls/index.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/admin.py",
		"/Users/baasman/Documents/python-workspace/django/cocktail/collect_cocktail/urls.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/templates/base_site.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/fish_love/settings.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/models.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/detail.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/views.py",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/index.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/static/style.css",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/templates/polls/results.html",
		"/Users/baasman/Documents/python-workspace/django/fish_love/polls/tests.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper/spiders",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper/rym_chart_scraper",
			"/Users/baasman/Documents/python-workspace/rym_chart_scraper"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"1950",
			"='",
			"season",
			"max_year",
			"min_year",
			"1970",
			"2014",
			"released",
			"max_year",
			"LEAGUE_ID",
			"layout",
			"All",
			"400",
			"wid",
			"p",
			"widgets.py",
			"team",
			"index",
			"circle",
			"plot_height",
			"navy",
			"data",
			"warriors",
			"cavs",
			"90",
			"87",
			"100",
			"cavs",
			"warriors",
			"line",
			"points",
			"np",
			"password",
			"create_baseline",
			"relu",
			"accuracy",
			"val_acc",
			"acc",
			"start_session",
			"_cards",
			"value",
			"terminal",
			"medium",
			"MODEL_PARAMS",
			"pas",
			"import",
			"medium",
			"baasman",
			"settings",
			"create_topalbums_table",
			"postgres",
			"from",
			"RYM_rating",
			"models",
			"SomePipeline",
			"create_deals_table",
			"response_status_cou",
			"str",
			"scrapy",
			"Artist",
			"()",
			"artist",
			"scrapy",
			"i",
			"div",
			"shell",
			", ",
			"page",
			"http",
			"page",
			"petal_width",
			"petal_length",
			"x",
			"p = figure()\np.circle('x', 'y', source=source, size=20)\nshow(p)\n",
			"square",
			"line_color",
			"circle",
			"from",
			"path",
			":\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"RYMRating"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/baasman/Documents/python-workspace/movies/main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4309,
						"regions":
						{
						},
						"selection":
						[
							[
								1672,
								1467
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"open_with_edit": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 279.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/baasman/Documents/python-workspace/movies/testnba.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 342,
						"regions":
						{
						},
						"selection":
						[
							[
								311,
								311
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"auto_name": "from",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "constants.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 644,
						"regions":
						{
						},
						"selection":
						[
							[
								638,
								638
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										640,
										641
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										633,
										634
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1010,
						"regions":
						{
						},
						"selection":
						[
							[
								680,
								680
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"open_with_edit": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 109798,
						"regions":
						{
						},
						"selection":
						[
							[
								109798,
								109798
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"default_dir": "/Users/baasman/Documents/python-workspace/movies",
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"incomplete_sync": null,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "python",
							"repl_id": "bf6fd6d7b2f0471187e664de02c64e1f",
							"repl_restart_args":
							{
								"autocomplete_server": true,
								"cmd":
								{
									"linux":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									],
									"osx":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									],
									"windows":
									[
										"python",
										"-u",
										"${packages}/SublimeREPL/config/Python/ipy_repl.py"
									]
								},
								"cwd": "$file_path",
								"encoding": "utf8",
								"extend_env":
								{
									"PYTHONIOENCODING": "utf-8",
									"SUBLIMEREPL_EDITOR": "subl -w"
								},
								"external_id": "python",
								"syntax": "Packages/Python/Python.tmLanguage",
								"type": "subprocess"
							},
							"repl_sublime2": false,
							"smart_indent": false,
							"spell_check": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42190.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "constanst.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 611,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.697507267442,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 230.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"output.loghighlight":
	{
		"height": 100.0
	},
	"output.sftp":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "nba_viz.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/r-workspace/test_sub.R"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/python-workspace/microblog/microblog.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 47.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 176.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
